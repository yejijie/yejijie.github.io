<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[NoobSky]]></title>
  <subtitle><![CDATA[Talk is cheap. Show me the code. - http://noobsky.com]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.noobsky.com/"/>
  <updated>2016-08-18T10:59:58.000Z</updated>
  <id>http://blog.noobsky.com/</id>
  
  <author>
    <name><![CDATA[Jaye]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java引用类型]]></title>
    <link href="http://blog.noobsky.com/2016/08/18/Java%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://blog.noobsky.com/2016/08/18/Java引用类型/</id>
    <published>2016-08-18T08:06:52.000Z</published>
    <updated>2016-08-18T10:59:58.000Z</updated>
    <content type="html"><![CDATA[<p>Java中有如下四种类型的引用：</p>
<ul>
<li>强引用(Strong Reference)</li>
<li>弱引用(WeakReference)</li>
<li>软引用(SoftReference)</li>
<li>虚引用(PhantomReference)<br>其中只有强引用FinalReference类是包内可见，其他3种引用类型均为public，可以在应用程序中直接使用。</li>
</ul>
<h2 id="强引用">强引用</h2><p>Java中的引用，有点像C++中的指针。通过引用，可以对堆中的对象进行操作。在函数中，当创建一个对象，该对象被分配在堆中，通过这个对象的引用才能对这个对象进行操作。如：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">StringBuffer</span> str = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>(<span class="string">"Hello Jaye"</span>);</span><br></pre></td></tr></table></figure></p>
<p>如果以上代码是在函数体内运行的，那么局部变量str将分配在栈上，而对象StringBuffer实例被分配在堆上。局部变量str指向StringBuffer实例所在堆空间，通过str可以操作该实例，那么str就是StringBuffer的引用。如果进行一次赋值<code>StringBuffer str1 = str</code>，那么，str所指向的对象也将被str1所指向，同时在局部栈空间上会分配空间存放str1变量。此时，该StringBuffer实例就有两个引用。以上中的两个引用，都是强引用，强引用具备以下特点：</p>
<ul>
<li>强引用可以直接访问目标对象</li>
<li>强引用所指向的对象在任何时候都不会被系统回收。JVM宁愿抛出OOM异常也不回收强引用所指向的对象。</li>
<li>强引用可能导致内存泄露。</li>
</ul>
<h2 id="软引用">软引用</h2><p>Java中的软引用使用java.lang.ref.SoftReference类来表示。一个持有软引用的对象，不会被JVM很快回收，JVM会根据当前堆的使用情况来判断何时回收。当堆的使用率临近阈值时，才会去回收软引用的对象。只要有足够的内存，软引用可能在内存中存活相当长的一段时间。因此，软引用可以用来实现缓存机制。</p>
<h2 id="弱引用">弱引用</h2><p>弱引用是一种比软引用较弱的引用类型。在系统GC时，只要发现弱引用，不管堆空间是否充足，都会将对象进行回收。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
<h2 id="虚引用">虚引用</h2><p>虚引用是所有引用类型中最弱的一个。一个持有虚引用的对象，和没有引用几乎是一样的，随时都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。</p>
<h2 id="WeakHashMap及其实现">WeakHashMap及其实现</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>Java中有如下四种类型的引用：</p>
<ul>
<li>强引用(Strong Reference)</li>
<li>弱引用(WeakReference)</li>
<li>软引用(SoftReference)</li>
<li>虚引用(PhantomReference]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解ThreadLocal]]></title>
    <link href="http://blog.noobsky.com/2016/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ThreadLocal/"/>
    <id>http://blog.noobsky.com/2016/08/18/深入理解ThreadLocal/</id>
    <published>2016-08-18T00:26:09.000Z</published>
    <updated>2016-08-18T07:46:56.000Z</updated>
    <content type="html"><![CDATA[<p>ThreadLocal到底是干啥的，首先来看一下官方文档中的说明：<br>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).<br>大意是：<br>ThreadLocal类用来提供线程内的局部变量，这种变量每个线程只能访问（通过get或set方法访问）其自身拥有的，独立的初始化变量的拷贝。ThreadLocal实例通常都是<code>private static</code>类型的，用于关联线程的状态。</p>
<p>不知道这样翻译达意不，另附上网友的翻译：<br>ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问(通过get或set方法访问)时能保证各个线程里的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程的上下文。</p>
<p>其设计的初衷是为了解决多线程编程中的资源共享问题。大家熟悉的synchronized同步采取的是“以时间换空间”的策略，本质上是对共享资源上锁，让大家排队操作。而ThreadLocal采取的是“以空间换时间”的思路，为每个使用该变量的线程提供独立的变量副本（线程内部的的局部变量），可以保证本线程任何时间操纵的都是同一个对象。</p>
<h2 id="ThreadLocal的基本方法">ThreadLocal的基本方法</h2><h3 id="构造函数">构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a thread local variable.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是一个无参的构造函数，内部也没做任何初始化。</p>
<h3 id="initialValue">initialValue</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>该方法返回当前线程的线程本地变量（thread-local variable）的初始值。当线程第一次使用get()方法访问变量时会调用该方法。但是如果一开始就调用set()方法，则该方法不会被调用。通常该方法最多只会被每个线程调用一次，但是如果你调用remove()方法后又调用get()方法，那么initialValue()方法将再次被调用。该方法返回null值，如果你想返回null以外的值，则必须为ThreadLocal创建子类，并重写此方法提供初始值。通常使用匿名内部类的方式。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; sequence = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="get">get</h3><p>该方法用来获取与当前线程关联的ThreadLocal的值（返回当前线程的线程局部变量的副本拷贝的值）。如果这是线程第一次调用该方法，则创建并初始化(initialValue)此副本。方法原型：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public T <span class="function"><span class="title">get</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="set">set</h3><p>set函数用来设置当前线程的该ThreadLocal的值，通常子类不需要重写该方法，它们仅依赖于 initialValue() 方法来设置线程局部变量的值。方法原型如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">set</span>(T value)</span><br></pre></td></tr></table></figure></p>
<h3 id="remove">remove</h3><p>remove函数用来将当前线程的ThreadLocal绑定的值删除（移除当前线程中线程局部变量的值）。方法原型如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="function"><span class="title">remove</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="ThreadLocal的使用">ThreadLocal的使用</h2><p>下面演示ThreadLocal的使用。下面的例子是一个序列号生成器的程序，可能同时会有多个线程并发访问它，要保证每个线程得到的序列号都是自增的，而不能相互干扰。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ThreadLocalTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final ThreadLocal&lt;Integer&gt; sequence = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        @<span class="function">Override</span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> MySequence()).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> MySequence implements Runnable&#123;</span><br><span class="line">        @<span class="function">Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" =&gt; "</span> + sequence.get());</span><br><span class="line">                sequence.<span class="built_in">set</span>(sequence.get() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">2</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">2</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到，各个线程的序列号都是相互独立的。也就是说，TheadLocal 为每一个线程提供了一个独立的副本！。</p>
<p>接下来写一个更有实际意义的例子，SimpleDateFormat不是线程安全的，详见本博文<a href="">SimpleDateFormat线程安全问题</a>，我们利用ThreadLocal来写一个线程安全的工具类对日期字符串进行解析和格式化输出。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DateFormat df = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == df)&#123;</span><br><span class="line">            df = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">            threadLocal.set(df);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ThreadLocal实现原理">ThreadLocal实现原理</h2><p>上次面试的时候面试官问我ThreadLocal是如何实现的？我说：<br>每个ThreadLocal类里有一个Map，然后用线程的ID作为Map的key，实例对象作为Map的value，这样就能达到各个线程的值隔离的效果。<br>然后面试官问我确定吗？额，我好虚……这是最简单的设计方案，JDK最早期的ThreadLocal就是这样设计的，但是现在已经不是这样了:(。</p>
<h3 id="get方法">get方法</h3><p>JDK7中get方法的源码：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T get() &#123;</span><br><span class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span><span class="built_in">.</span>currentThread();</span><br><span class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap<span class="built_in">.</span>Entry e = <span class="built_in">map</span><span class="built_in">.</span>getEntry(this);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="built_in">null</span>)</span><br><span class="line">                <span class="keyword">return</span> (T)e<span class="built_in">.</span>value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>JDK8中get方法的源码：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public T get() &#123;</span><br><span class="line">        <span class="type">Thread</span> t = <span class="type">Thread</span>.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != null) &#123;</span><br><span class="line">            <span class="type">ThreadLocalMap</span>.<span class="type">Entry</span> e = map.getEntry(this);</span><br><span class="line">            <span class="keyword">if</span> (e != null) &#123;</span><br><span class="line">                @<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T <span class="literal">result</span> = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>JDK7和JDK8中没啥变化，那就使用JDK8的源码来分析吧。首先通过getMap方法获取ThreadLocalMap，如果ThreadLocalMap为空则调用setInitialValue方法。<br>其中getMap方法源码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>setInitialValue方法的源码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        T <span class="keyword">value</span> = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="function"><span class="keyword">else</span></span><br><span class="line">            <span class="title">createMap</span>(<span class="params">t, <span class="keyword">value</span></span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>createMap方法的源码为：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">       t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>看了以上的源码之后，就会明白get方法的步骤如下：</p>
<ol>
<li>首先通过Thread.currentThread()获取当前线程</li>
<li>根据当前线程获得对应的Map</li>
<li>如果获得的Map不为空，（该Map的key为ThreadLocal当前对象）取出key为当前ThreadLocal对应的Entry对象返回，再从Entry中返回对应的value。</li>
<li>如果Map为空或者Entry为空则调用setInitialValue方法，setInitialValue方法中利用initialValue方法获得初始值value。如果Map为空则用当前ThreadLocal对象为firstKey，value为firstValue构建一个新的Map的。如果是Entry为空则将当前ThreadLocal对象对应Entry放入Map中。</li>
</ol>
<h3 id="set方法">set方法</h3><p>set方法源码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="params">T <span class="keyword">value</span></span>) </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="function"><span class="keyword">else</span></span><br><span class="line">            <span class="title">createMap</span>(<span class="params">t, <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>set方法类似，首先获得当前线程对象，然后通过getMap拿到线程的ThreadLocalMap，并将值设入ThreadLocalMap中。ThreadLocalMap可以理解为一个Map（其实不是，后面介绍），但是它是定义在Thread内部的成员。注意下面的定义是从Thread类中摘出来的：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* ThreadLocal values pertaining <span class="keyword">to</span> this thread. This map <span class="keyword">is</span> maintained</span><br><span class="line"> * <span class="keyword">by</span> <span class="keyword">the</span> ThreadLocal <span class="type">class</span>. */</span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure></p>
<p>经过上面的分析，我们可以总结一下ThreadL的设计原理：<br>每一个Thread维护一个ThreadLocalMap的映射表，该映射表的key为ThreadL对象，value就是真正存储的线程的局部变量。比如上面SimpleDateFormat的例子中value就是SimpleDateFormat。</p>
<h2 id="ThreadLocalMap">ThreadLocalMap</h2><p>先上ThreadLocalMap是ThreadLocal中的内部类，ThreadLocalMap的key是ThreadLocal的弱引用<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The entries in this hash map extend WeakReference, using</span><br><span class="line">     * its main ref field as the key (which is always a</span><br><span class="line">     * ThreadLocal object).  Note that null keys (i.e. entry.get()</span><br><span class="line">     * == null) mean that the key is no longer referenced, so the</span><br><span class="line">     * entry can be expunged from table.  Such entries are referred to</span><br><span class="line">     * as "stale entries" in the code that follows.</span><br><span class="line">     */</span></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">WeakReference&lt;ThreadLocal&gt;</span> &#123;</span></span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        <span class="type">Object</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="type">Entry</span>(<span class="type">ThreadLocal</span> k, <span class="type">Object</span> v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>弱引用是比强引用弱得多的引用。Java虚拟机在垃圾回收时，如果发现弱引用，就会立即回收。由上面的代码可知ThreadLocalMap内部由一系列Entry构成，每一个Entry都是WeakReference<threadlocal>。这里的参数k就是Map的key，v就是Map的value。其中k也就是ThreadLocal实例，作为弱引用使用（sunper(k)就是调用了WeakReference的构造函数）。因此，虽然这里使用ThreadLocal作为Map的key，但是实际上，它并不真的持有ThreadLocal的引用。而当ThreadLocal的外部引用被回收时，ThreadLocalMap中的key就会变成null。当系统进行ThreadLocalMap清理时，就会自然将这些垃圾数据回收。</threadlocal></p>
<h2 id="参考文献">参考文献</h2><p><a href="http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/" target="_blank" rel="external">解密ThreadLocal</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ThreadLocal到底是干啥的，首先来看一下官方文档中的说明：<br>This class provides thread-local variables. These variables differ from their normal counterparts in]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ jquery.form和jersey异步上传图片（SpringMVC）]]></title>
    <link href="http://blog.noobsky.com/2016/08/16/jquery-form%E5%92%8Cjersey%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%EF%BC%88SpringMVC%EF%BC%89/"/>
    <id>http://blog.noobsky.com/2016/08/16/jquery-form和jersey异步上传图片（SpringMVC）/</id>
    <published>2016-08-16T12:23:03.000Z</published>
    <updated>2016-08-16T12:51:11.000Z</updated>
    <content type="html"><![CDATA[<p>在做一个商城项目时，使用图片服务器来为系统负载均衡,减轻系统压力,并使用Jquery.form和Jersey异步上传图片到图片服务器。</p>
<p>SpringMVC上传图片需要配置applicationContext.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- 上传图片转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"multipartResolver"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>  </span><br><span class="line">       <span class="comment">&lt;!-- 设置上传文件的最大尺寸为1MB --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxUploadSize"</span> <span class="attribute">value</span>=<span class="value">"1048576"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>页面表单为：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"/res/common/js/jquery.form.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="comment">//采用jquery.form.js异步上传图片,并结合&lt;form&gt;表单</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">uploadFic</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">var</span> options = &#123;</span><br><span class="line">			<span class="comment">//请求路径</span></span><br><span class="line">			url = <span class="string">"/upload/uploadPic.do"</span>,</span><br><span class="line">			dataType = <span class="string">"json"</span>,</span><br><span class="line">			type = <span class="string">"post"</span>,</span><br><span class="line">			beforeSubmit : <span class="function"><span class="keyword">function</span><span class="params">(formData,jqForm,options)</span></span>&#123;</span><br><span class="line">				<span class="comment">//判断是否为图片</span></span><br><span class="line">				<span class="keyword">var</span> f = jqForm[<span class="number">0</span>];<span class="comment">//将jqForm转成DOM对象</span></span><br><span class="line">				<span class="keyword">var</span> v = f.logoPic.value;<span class="comment">//获取DOM对象中name为logoPic的值</span></span><br><span class="line">				<span class="comment">//获取扩展名,并转成小写</span></span><br><span class="line">				<span class="keyword">var</span> ext = v.substring(v.length-<span class="number">3</span>).toLowerCase();</span><br><span class="line">				<span class="comment">//比对扩展名 jpg gif bmp png</span></span><br><span class="line">				<span class="keyword">if</span>(ext != <span class="string">"jpg"</span> &amp;&amp; ext != <span class="string">"gif"</span> &amp;&amp; ext != <span class="string">"bmp"</span> &amp;&amp; ext != <span class="string">"png"</span>)&#123;</span><br><span class="line">					alert(<span class="string">"只允许上传图片!"</span>);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//校验提交的表单</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;,</span><br><span class="line">			success : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span><br><span class="line">				<span class="comment">//处理结果</span></span><br><span class="line">				<span class="comment">//将相对路径设置给隐藏域中,提交时用</span></span><br><span class="line">				$(<span class="string">"#imgUrl"</span>).val(data.path);</span><br><span class="line">				<span class="comment">//将全路径设置给img标签,显示图片用</span></span><br><span class="line">				<span class="preprocessor">#("#allImgUrl).attr("src",data.url);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		$(<span class="string">"#jvForm"</span>).ajaxSubmit(options);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;form id=<span class="string">"jvForm"</span> action=<span class="string">"add.do"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">……</span><br><span class="line">	&lt;img src=<span class="string">""</span> id=<span class="string">"allImgUrl"</span>/&gt;</span><br><span class="line">	&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"imgUrl"</span> id=<span class="string">"imgUrl"</span>/&gt;</span><br><span class="line">	&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadPic"</span> onchange=<span class="string">"uploadPic()"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>
<p>对应的UploadController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.common.web.ResponseUtils;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.core.web.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.Client;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.ClientHandlerException;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.UniformInterfaceException;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.WebResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 上传图片 商品 品牌 商品介绍Fck</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> lx</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">	<span class="comment">//上传图片</span></span><br><span class="line">	<span class="annotation">@RequestMapping</span>(value = <span class="string">"/upload/uploadPic.do"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadPic</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>)</span> MultipartFile pic, HttpServletResponse response) </span>&#123;</span><br><span class="line">		<span class="comment">// 扩展名</span></span><br><span class="line">		String ext = FilenameUtils.getExtension(pic.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 图片名称生成策略</span></span><br><span class="line">		DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmssSSS"</span>);</span><br><span class="line">		<span class="comment">// 图片名称的另一部分,加上随机的三位数</span></span><br><span class="line">		String format = df.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">			format += r.nextInt(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 实例化一个Jersey</span></span><br><span class="line">		Client client = <span class="keyword">new</span> Client();</span><br><span class="line">		<span class="comment">// 保存数据库</span></span><br><span class="line">		String path = <span class="string">"upload/"</span> + format + <span class="string">"."</span> + ext;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 图片服务器地址</span></span><br><span class="line">		String url = Constants.IMAGE_URL + path;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置请求路径</span></span><br><span class="line">		WebResource resource = client.resource(url);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			resource.put(String.class, pic.getBytes());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回两个路径</span></span><br><span class="line">		JSONObject jo = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		jo.put(<span class="string">"url"</span>, url);</span><br><span class="line">		jo.put(<span class="string">"path"</span>, path);</span><br><span class="line"></span><br><span class="line">		ResponseUtils.renderJson(response, jo.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ResponseUtils的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 异步返回各种格式</span><br><span class="line"> * json</span><br><span class="line"> * xml</span><br><span class="line"> * text</span><br><span class="line"> * <span class="doctag">@author</span> lx</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//发送内容  </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(HttpServletResponse response,String contentType,String text)</span></span>&#123;</span><br><span class="line">		response.setContentType(contentType);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			response.getWriter().write(text);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送的是JSON</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderJson</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"application/json;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送xml</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderXml</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"text/xml;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送text</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderText</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"text/plain;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要两台服务器，即两个Tomcat，一个是项目本身所在的服务器，假设8080，那么需要添加另外一台服务器作为图片存储所在的服务器，假设8888，在图片存储的服务器Tomcat(8888)中conf/web.xml中修改如下配置，也就是添加readonly=false，服务器内容默认只读，现在改成false，这样图片就能上传到这个服务器。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-<span class="built_in">name</span>&gt;<span class="keyword">default</span>&lt;/servlet-<span class="built_in">name</span>&gt;        &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;debug&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="number">0</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">		   &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;readonly&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="literal">false</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">        &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;listings&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="literal">false</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">load</span>-on-startup&gt;<span class="number">1</span>&lt;/<span class="built_in">load</span>-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p>
<p>开始时遇到错误：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com<span class="class">.sun</span><span class="class">.jersey</span><span class="class">.api</span><span class="class">.client</span><span class="class">.UniformInterfaceException</span>:</span><br><span class="line">PUT http:<span class="comment">//localhost:8888/image-web/upload/20160515104302348740.jpg returned a response status of 409 Conflict</span></span><br></pre></td></tr></table></figure></p>
<p>解决方案：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、确保image-web项目已经成功部署到<span class="number">8888</span>服务器</span><br><span class="line"><span class="number">2</span>、确保<span class="number">8888</span>服务器成功启动</span><br><span class="line"><span class="number">3</span>、确保服务器webapps中image-web项目中存在upload路径</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做一个商城项目时，使用图片服务器来为系统负载均衡,减轻系统压力,并使用Jquery.form和Jersey异步上传图片到图片服务器。</p>
<p>SpringMVC上传图片需要配置applicationContext.xml:<br><figure class="hig]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SimpleDateFormat线程安全问题]]></title>
    <link href="http://blog.noobsky.com/2016/08/16/SimpleDateFormat%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.noobsky.com/2016/08/16/SimpleDateFormat线程安全问题/</id>
    <published>2016-08-16T10:46:07.000Z</published>
    <updated>2016-08-16T12:17:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>SimpleDateFormat是Java中一个非常常用的类，该类用来对日期字符串进行解析和格式化输出，但是SimpleDateFormat类不是线程安全的，在多线程环境下调用format和parse方法应该使用同步代码或者使用ThreadLocal来避免线程安全问题。首先我们写一个日期工具类DateUtil来对日期字符串进行解析和格式化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在多线程环境下进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatThreadSafeTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + DateUtil.parse(<span class="string">"2016-08-16 19:31:30"</span>));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SimpleDateFormatThreadSafeTest()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java<span class="class">.lang</span><span class="class">.NumberFormatException</span>: multiple points</span><br><span class="line">	at sun<span class="class">.misc</span><span class="class">.FloatingDecimal</span><span class="class">.readJavaFormatString</span>(FloatingDecimal<span class="class">.java</span>:<span class="number">1110</span>)</span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Double</span><span class="class">.parseDouble</span>(Double<span class="class">.java</span>:<span class="number">540</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DigitList</span><span class="class">.getDouble</span>(DigitList<span class="class">.java</span>:<span class="number">168</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DecimalFormat</span><span class="class">.parse</span>(DecimalFormat<span class="class">.java</span>:<span class="number">1321</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.subParse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1793</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.parse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1455</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DateFormat</span><span class="class">.parse</span>(DateFormat<span class="class">.java</span>:<span class="number">355</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtil</span><span class="class">.parse</span>(DateUtil<span class="class">.java</span>:<span class="number">18</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtilTest</span><span class="variable">$SimpleDateFormatThreadSafeTest</span>.<span class="function"><span class="title">run</span><span class="params">(DateUtilTest.java:<span class="number">19</span>)</span></span></span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Thread</span><span class="class">.run</span>(Thread<span class="class">.java</span>:<span class="number">745</span>)</span><br><span class="line">java<span class="class">.lang</span><span class="class">.NumberFormatException</span>: multiple points</span><br><span class="line">	at sun<span class="class">.misc</span><span class="class">.FloatingDecimal</span><span class="class">.readJavaFormatString</span>(FloatingDecimal<span class="class">.java</span>:<span class="number">1110</span>)</span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Double</span><span class="class">.parseDouble</span>(Double<span class="class">.java</span>:<span class="number">540</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DigitList</span><span class="class">.getDouble</span>(DigitList<span class="class">.java</span>:<span class="number">168</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DecimalFormat</span><span class="class">.parse</span>(DecimalFormat<span class="class">.java</span>:<span class="number">1321</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.subParse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1793</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.parse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1455</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DateFormat</span><span class="class">.parse</span>(DateFormat<span class="class">.java</span>:<span class="number">355</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtil</span><span class="class">.parse</span>(DateUtil<span class="class">.java</span>:<span class="number">18</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtilTest</span><span class="variable">$SimpleDateFormatThreadSafeTest</span>.<span class="function"><span class="title">run</span><span class="params">(DateUtilTest.java:<span class="number">19</span>)</span></span></span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Thread</span><span class="class">.run</span>(Thread<span class="class">.java</span>:<span class="number">745</span>)</span><br><span class="line">Thread-<span class="number">2</span>:Sat Aug <span class="number">16</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">30</span> CST <span class="number">2200</span></span><br><span class="line">Thread-<span class="number">0</span>:Tue Aug <span class="number">16</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">30</span> CST <span class="number">2016</span></span><br></pre></td></tr></table></figure></p>
<p>有些线程发生java.lang.NumberFormatException: multiple points错误，有些虽然没有错误但是离谱的是穿越了：Thread-2:Sat Aug 16 19:31:30 CST 2200</p>
<h2 id="原因">原因</h2><p>我们不要以为SimpleDateFormat实例变量已经用final修饰了就是状态不变线程安全的。在JDK的官方文档中有提到：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date formats are <span class="operator">not</span> synchronized. It is recommended <span class="built_in">to</span> <span class="built_in">create</span> separate <span class="built_in">format</span> instances <span class="keyword">for</span> <span class="keyword">each</span> thread. If multiple threads access <span class="operator">a</span> <span class="built_in">format</span> concurrently, <span class="keyword">it</span> must be synchronized externally.</span><br></pre></td></tr></table></figure></p>
<p>SimpleDateFormat中日期格式不是同步的。建议为每个线程都分别创建format实例变量。如果多个线程共享一个format实例的话，则必须保证外部同步的。SimpleDateFormat继承了DateFormat,在DateFormat中定义了一个protected属性的 Calendar类的对象：calendar。该成员变量是多线程共享的，会在多线程的时候出现错误。</p>
<h2 id="解决方案">解决方案</h2><h3 id="需要的时候创建新实例">需要的时候创建新实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次需要用到SimpleDateFormat 的时候新new一个实例，不管什么时候，将有线程安全问题的对象由共享变为局部私有都能避免多线程问题，不过也加重了创建对象的负担。在一般情况下，这样其实对性能影响不是很明显的。</p>
<h3 id="使用同步">使用同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法在当线程较多时，当一个线程获得锁调用该方法时，其他想要调用此方法的线程就要阻塞，多线程并发量大的时候会对性能有一定的影响。</p>
<h3 id="使用ThreadLocal">使用ThreadLocal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DateFormat df = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == df)&#123;</span><br><span class="line">            df = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">            threadLocal.set(df);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p>
<h2 id="参考文献">参考文献</h2><p><a href="http://zclau.com/2016/03/22/Java-SimpleDateFormat%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/" target="_blank" rel="external">Java SimpleDateFormat的线程安全性问题</a><br><a href="http://www.cnblogs.com/peida/archive/2013/05/31/3070790.html" target="_blank" rel="external">深入理解Java：SimpleDateFormat安全的时间格式化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><p>SimpleDateFormat是Java中一个非常常用的类，该类用来对日期字符串进行解析和格式化输出，但是SimpleDateFormat类不是线程安全的，在多线程环境下调用format和parse方法应该使用同步代码或者使用Thre]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="线程安全" scheme="http://blog.noobsky.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Excel-Sheet-Column-Number-Title/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Excel-Sheet-Column-Number-Title/</id>
    <published>2016-07-18T15:20:11.000Z</published>
    <updated>2016-07-18T15:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Excel Sheet Column Number/Title’<br>date: 2016-07-18 23:09:19<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Math<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="Excel_Sheet_Column_Title">Excel Sheet Column Title</h2><h3 id="题目描述">题目描述</h3><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="subst">-&gt; </span>A</span><br><span class="line"><span class="number">2</span> <span class="subst">-&gt; </span>B</span><br><span class="line"><span class="number">3</span> <span class="subst">-&gt; </span>C</span><br><span class="line"><span class="attribute">...</span></span><br><span class="line"><span class="number">26</span> <span class="subst">-&gt; </span>Z</span><br><span class="line"><span class="number">27</span> <span class="subst">-&gt; </span>AA</span><br><span class="line"><span class="number">28</span> <span class="subst">-&gt; </span>AB</span><br></pre></td></tr></table></figure></p>
<h3 id="代码">代码</h3><p>其实就是26进制转换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n--;</span><br><span class="line">            sb.append((<span class="keyword">char</span>)(<span class="string">'A'</span> + n % <span class="number">26</span>));</span><br><span class="line">            n = n / <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不在最后反转就用前插函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           n--;</span><br><span class="line">           result.insert(<span class="number">0</span>, (<span class="keyword">char</span>)(<span class="string">'A'</span> + n % <span class="number">26</span>));</span><br><span class="line">           n /= <span class="number">26</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result.toString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Excel_Sheet_Column_Number">Excel Sheet Column Number</h2><h3 id="题目描述-1">题目描述</h3><p>Related to question Excel Sheet Column Title</p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A <span class="subst">-&gt; </span><span class="number">1</span></span><br><span class="line">B <span class="subst">-&gt; </span><span class="number">2</span></span><br><span class="line">C <span class="subst">-&gt; </span><span class="number">3</span></span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">Z <span class="subst">-&gt; </span><span class="number">26</span></span><br><span class="line">AA <span class="subst">-&gt; </span><span class="number">27</span></span><br><span class="line">AB <span class="subst">-&gt; </span><span class="number">28</span></span><br></pre></td></tr></table></figure></p>
<h3 id="代码-1">代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if(s == null || s.length() == 0) return 0;</span></span><br><span class="line">        <span class="comment">// int sum = 0;</span></span><br><span class="line">        <span class="comment">// s = s.toUpperCase();</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; s.length(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     int digit = s.charAt(i) - 'A' + 1;</span></span><br><span class="line">        <span class="comment">//     sum = sum + digit*(int)Math.pow(26,s.length()-(i+1));</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return sum;</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            sum = sum * <span class="number">26</span> + (s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Excel Sheet Column Number/Title’<br>date: 2016-07-18 23:09:19<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Math<br>c]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Valid-Anagram/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Valid-Anagram/</id>
    <published>2016-07-18T11:06:27.000Z</published>
    <updated>2016-07-18T11:06:27.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Valid Anagram’<br>date: 2016-07-18 18:15:37<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Hash Table</li>
<li>Sort<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<p>Follow up:<br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<h2 id="代码">代码</h2><p>直接字符串排序，然后判断是否相等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意先判空，不然后面可能会空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == s) <span class="keyword">return</span> <span class="keyword">null</span> == t;</span><br><span class="line">        <span class="keyword">return</span> sort(s).equals(sort(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sort</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] content = s.toCharArray();</span><br><span class="line">        Arrays.sort(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断两个字符出现的字符和次数是否相等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length() ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] alphas = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) alphas[s.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.length(); j++) alphas[t.charAt(j) - <span class="string">'a'</span>]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> alpha:alphas) <span class="keyword">if</span>(alpha != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Valid Anagram’<br>date: 2016-07-18 18:15:37<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Hash Table</li>
<li>Sort<br]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Same-Tree/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Same-Tree/</id>
    <published>2016-07-18T10:12:54.000Z</published>
    <updated>2016-07-18T10:12:54.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Same Tree’<br>date: 2016-07-18 18:09:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Tree</li>
<li>DFS<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//都为空返回true</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//if((p == null &amp;&amp; q != null) || (p != null &amp;&amp; q == null)) return false;</span></span><br><span class="line">        <span class="comment">//只有一个为null，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span> ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归调用   </span></span><br><span class="line">        <span class="keyword">return</span> p.val==q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Same Tree’<br>date: 2016-07-18 18:09:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Tree</li>
<li>DFS<br>categories]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Delete-Node-in-a-Linked-List/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Delete-Node-in-a-Linked-List/</id>
    <published>2016-07-18T10:05:20.000Z</published>
    <updated>2016-07-18T10:05:20.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Delete Node in a Linked List’<br>date: 2016-07-18 17:58:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Linked List<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将当前需要删除的节点修改为下一个节点的值，并删除下一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Delete Node in a Linked List’<br>date: 2016-07-18 17:58:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Linked List<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Move Zeroes]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Move-Zeroes/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Move-Zeroes/</id>
    <published>2016-07-17T08:34:57.000Z</published>
    <updated>2016-07-17T08:44:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given an array nums, write a function to move all 0’s to the end of it while <font color="red">maintaining the relative order of the non-zero elements</font>.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:</p>
<pre><code><span class="number">1.</span> You must <span class="built_in">do</span> this <span class="operator">in</span>-place <span class="keyword">without</span> making <span class="operator">a</span> copy <span class="operator">of</span> <span class="operator">the</span> array.
<span class="number">2.</span> Minimize <span class="operator">the</span> total <span class="built_in">number</span> <span class="operator">of</span> operations.
</code></pre><h2 id="代码">代码</h2><p>题目要求我们要维护非零元素的原始相对顺序。我们只需要遍历数组，当遇到非零元素时，跟前面的元素交换，比如遇到第一个非零元素，我们交换到index = 0的位置，第二个非零元素交换到index = 1的位置。这样我们在保持原始不为零元素的相对顺序的时候将所有的零放到数组的后面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">int</span> temp = nums[current];</span><br><span class="line">              nums[current++] = nums[i];</span><br><span class="line">              nums[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实我们大可不必交换，遇到非零元素就按原来相对顺序放到数组前面部分，然后在后面补上零就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> insertPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>) nums[insertPos++] = num;</span><br><span class="line">    &#125;        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (insertPos &lt; nums.length) &#123;</span><br><span class="line">        nums[insertPos++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given an array nums, write a function to move all 0’s to the end of it while <font color="red">maintaining the rel]]>
    </summary>
    
      <category term="Array" scheme="http://blog.noobsky.com/tags/Array/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Two Pointers" scheme="http://blog.noobsky.com/tags/Two-Pointers/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Invert Binary Tree]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Invert-Binary-Tree/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Invert-Binary-Tree/</id>
    <published>2016-07-17T08:16:10.000Z</published>
    <updated>2016-07-17T08:23:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Invert a binary tree.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">7</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span> <span class="number">6</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<p>to<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">7</span>     <span class="number">2</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">9</span>   <span class="number">6</span> <span class="number">3</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>Trivia:<br>This problem was inspired by this original tweet by Max Howell:<br>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>
<h2 id="代码">代码</h2><p>使用DFS的方法。如果当前节点为null，直接返回null。否则递归反转当前节点左子树和右子树。最后交换当前节点的左子树和右子树。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     TreeNode right = invertTree(root.right);</span><br><span class="line">     TreeNode left = invertTree(root.left);</span><br><span class="line">     root.right = left;</span><br><span class="line">     root.left = right;</span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用BFS的方法。当从队列中取出一个节点时，先交换该节点左右子节点，然后再讲交换后的左右子节点加入队列中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="comment">//BFS</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          TreeNode current = queue.poll();</span><br><span class="line">          TreeNode temp = current.left;</span><br><span class="line">          current.left = current.right;</span><br><span class="line">          current.right = temp;</span><br><span class="line">          <span class="keyword">if</span>(current.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">              queue.offer(current.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(current.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">              queue.offer(current.right);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Invert a binary tree.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</sp]]>
    </summary>
    
      <category term="BFS" scheme="http://blog.noobsky.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://blog.noobsky.com/tags/DFS/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Tree" scheme="http://blog.noobsky.com/tags/Tree/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Maximum Depth of Binary Tree]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Maximum-Depth-of-Binary-Tree/</id>
    <published>2016-07-17T07:55:38.000Z</published>
    <updated>2016-07-17T08:05:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<h2 id="代码">代码</h2><p>可以用DFS方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="comment">//DFS</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以用BFS</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="comment">//BFS，每个节点都会进队列一次，节点出队列时统计即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          count++;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> size = queue.size();</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">             TreeNode node = queue.poll();</span><br><span class="line">              <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                  queue.offer(node.left);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                  queue.offer(node.right);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest pat]]>
    </summary>
    
      <category term="BFS" scheme="http://blog.noobsky.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://blog.noobsky.com/tags/DFS/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Tree" scheme="http://blog.noobsky.com/tags/Tree/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Add Digits]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Add-Digits/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Add-Digits/</id>
    <published>2016-07-17T03:54:43.000Z</published>
    <updated>2016-07-17T07:45:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<p>Follow up:<br>Could you do it without any loop/recursion in O(1) runtime?</p>
<p>Hint:</p>
<pre><code><span class="number">1.</span> A naive implementation <span class="operator">of</span> <span class="operator">the</span> above <span class="built_in">process</span> is trivial. Could you come up <span class="operator">with</span> other methods?
<span class="number">2.</span> What are all <span class="operator">the</span> possible results?
<span class="number">3.</span> How <span class="built_in">do</span> they occur, periodically <span class="operator">or</span> randomly?
<span class="number">4.</span> You may find this Wikipedia article useful.
</code></pre><h2 id="代码">代码</h2><p>直接用程序的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String str = String.valueOf(num);</span><br><span class="line">        <span class="keyword">char</span>[] digits = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">                sum += Character.getNumericValue(digits[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//System.out.println(sum);</span></span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">            digits = String.valueOf(sum).toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实这里是有公式计算的:(，详见维基百科<a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="external">Digital root</a>。公式如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dr(<span class="keyword">n</span>) = 0 <span class="keyword">if</span> <span class="keyword">n</span> == 0</span><br><span class="line">dr(<span class="keyword">n</span>) = (b-1) <span class="keyword">if</span> <span class="keyword">n</span> != 0 and <span class="keyword">n</span> % (b-1) == 0</span><br><span class="line">dr(<span class="keyword">n</span>) = <span class="keyword">n</span> mod (b-1) <span class="keyword">if</span> <span class="keyword">n</span> % (b-1) != 0</span><br></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr(n) = <span class="number">1</span> + (n - <span class="number">1</span>) % <span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<p>所以程序很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For ex]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Math" scheme="http://blog.noobsky.com/tags/Math/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Reverse String]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Reverse-String/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Reverse-String/</id>
    <published>2016-07-17T03:11:35.000Z</published>
    <updated>2016-07-17T03:18:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello”, return “olleh”.</p>
<h2 id="代码">代码</h2><p>要求反转一个字符串<br>使用StringBuilder的reverse函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用两个指针，分别指向头尾，不断交互<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] temp = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = temp.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = temp[left];</span><br><span class="line">            temp[left] = temp[right];</span><br><span class="line">            temp[right] = ch;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Integer to English Words]]></title>
    <link href="http://blog.noobsky.com/2016/07/15/LeetCode-Integer-to-English-Words/"/>
    <id>http://blog.noobsky.com/2016/07/15/LeetCode-Integer-to-English-Words/</id>
    <published>2016-07-15T08:24:13.000Z</published>
    <updated>2016-07-15T08:26:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.</p>
<p>For example,<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> -&gt; <span class="string">"One Hundred Twenty Three"</span></span><br><span class="line"><span class="number">12345</span> -&gt; <span class="string">"Twelve Thousand Three Hundred Forty Five"</span></span><br><span class="line"><span class="number">1234567</span> -&gt; <span class="string">"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"</span></span><br></pre></td></tr></table></figure></p>
<p>Hint:</p>
<pre><code><span class="number">1.</span> Did you see a pattern <span class="keyword">in</span> dividing <span class="keyword">the</span> <span class="type">number</span> <span class="keyword">into</span> chunk <span class="keyword">of</span> <span class="property">words</span>? For example, <span class="number">123</span> <span class="keyword">and</span> <span class="number">123000.</span>
<span class="number">2.</span> Group <span class="keyword">the</span> <span class="type">number</span> <span class="keyword">by</span> thousands (<span class="number">3</span> digits). You can <span class="command">write</span> a helper function <span class="keyword">that</span> takes a <span class="type">number</span> <span class="keyword">less than</span> <span class="number">1000</span> <span class="keyword">and</span> convert just <span class="keyword">that</span> chunk <span class="keyword">to</span> <span class="property">words</span>.
<span class="number">3.</span> There are many edge cases. What are <span class="keyword">some</span> good test cases? Does your code work <span class="keyword">with</span> input such <span class="keyword">as</span> <span class="number">0</span>? Or <span class="number">1000010</span>? (<span class="keyword">middle</span> chunk <span class="keyword">is</span> zero <span class="keyword">and</span> should <span class="keyword">not</span> be printed out)
</code></pre><h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] LESS_THAN_20 = &#123;<span class="string">""</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>, <span class="string">"Ten"</span>, <span class="string">"Eleven"</span>, <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>, <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] TENS = &#123;<span class="string">""</span>, <span class="string">"Ten"</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] THOUSANDS = &#123;<span class="string">""</span>, <span class="string">"Thousand"</span>, <span class="string">"Million"</span>, <span class="string">"Billion"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"Zero"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        String word = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等于0进去是没有意义，只会带来无用"" + ""或者"" + Thousand ...</span></span><br><span class="line">            <span class="comment">//比如1000000没有这个if条件转换的结果为One Million Thousand正确应该为One Million</span></span><br><span class="line">            <span class="keyword">if</span>(num % <span class="number">1000</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                word = helper(num % <span class="number">1000</span>) + THOUSANDS[i] +<span class="string">" "</span>+ word;</span><br><span class="line">            &#125;</span><br><span class="line">            num /= <span class="number">1000</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word.trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将小于1000的数转换为English words</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helper</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">return</span> LESS_THAN_20[num % <span class="number">20</span>] + <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">return</span> TENS[num / <span class="number">10</span>] + <span class="string">" "</span> + helper(num % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> LESS_THAN_20[num / <span class="number">100</span>] + <span class="string">" Hundred "</span> + helper(num % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 ]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Self Crossing]]></title>
    <link href="http://blog.noobsky.com/2016/07/15/LeetCode-Self-Crossing/"/>
    <id>http://blog.noobsky.com/2016/07/15/LeetCode-Self-Crossing/</id>
    <published>2016-07-15T03:59:51.000Z</published>
    <updated>2016-07-15T05:29:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>ou are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. In other words, after each move your direction changes counter-clockwise.</p>
<p>Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.</p>
<p>Example 1:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given x = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">┌───┐</span><br><span class="line">│   │</span><br><span class="line">└───┼──&gt;</span><br><span class="line">    │</span><br><span class="line"></span><br><span class="line"><span class="function">Return <span class="title">true</span> <span class="params">(self crossing)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">┌──────┐</span><br><span class="line">│      │</span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">└────────────&gt;</span><br><span class="line"></span><br><span class="line"><span class="function">Return <span class="title">false</span> <span class="params">(not self crossing)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Example 3:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given x = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">┌───┐</span><br><span class="line">│   │</span><br><span class="line">└───┼&gt;</span><br><span class="line"></span><br><span class="line"><span class="function">Return <span class="title">true</span> <span class="params">(self crossing)</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="代码">代码</h2><p>有三种情况：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*               i-2</span><br><span class="line">    case 1 : i-1┌─┐</span><br><span class="line">                └─┼─&gt;i</span><br><span class="line">                 i-3</span><br><span class="line"></span><br><span class="line">                    i-2</span><br><span class="line">    case 2 : i-1 ┌────┐</span><br><span class="line">                 └─══&gt;┘i-3</span><br><span class="line">                 i  i-4      (i overlapped i-4)</span><br><span class="line"></span><br><span class="line">    case 3 :    i-4</span><br><span class="line">               ┌──┐</span><br><span class="line">               │i&lt;┼─┐</span><br><span class="line">            i-3│ i-5│i-1</span><br><span class="line">               └────┘</span><br><span class="line">                i-2</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure></p>
<p>第一种情况是当前边(i)跟3步之前走的边(i-3)相交。比如第3条边和第0条边、第4条边和第1条边等等(下标从0开始)。需要满足的条件为i-1条边长度小于等于i-3条边，i条边的长度大于等于i-2条边。</p>
<p>第二种情况是当前边i跟4步之前走的i-4条边相交。比如第4条边和第0条边、第5条边和第1条边等等。需要满足的条件是i-1条边的长度和i-3条边的长度相等，i条边的长度大于等于i-2边和i-4边的长度之差。</p>
<p>第三种情况是当前边i跟5步之前走的的i-5边相交。比如第5条边和第0条边、第6条边跟第1条边等等。需要满足的条件为第i-2条边大于等于第i-4条边，第i-3条边大于等于第i-1条边，第i-1条边大于等于i-3条边和i-5条边之差，第i条边的长度大于等于第i-2条边和第i-4条边之差。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSelfCrossing</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>, len = x.length; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="comment">//case 1</span></span><br><span class="line">            <span class="keyword">if</span>(x[i-<span class="number">1</span>] &lt;= x[i-<span class="number">3</span>] &amp;&amp; x[i] &gt;= x[i-<span class="number">2</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//case 2</span></span><br><span class="line">            <span class="comment">//用减法比加法好，没有溢出的危险</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">4</span> &amp;&amp; x[i-<span class="number">1</span>] == x[i-<span class="number">3</span>] &amp;&amp; x[i] &gt;= x[i-<span class="number">2</span>] - x[i-<span class="number">4</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//case 3，注意x[i-3] &gt;= x[i-1]</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">5</span> &amp;&amp; x[i-<span class="number">2</span>] &gt;= x[i-<span class="number">4</span>] &amp;&amp; x[i-<span class="number">3</span>] &gt;= x[i-<span class="number">1</span>] &amp;&amp; x[i-<span class="number">1</span>] &gt;= x[i-<span class="number">3</span>] - x[i-<span class="number">5</span>] &amp;&amp; x[i] &gt;= x[i-<span class="number">2</span>] - x[i-<span class="number">4</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>ou are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Minimum Window Substring]]></title>
    <link href="http://blog.noobsky.com/2016/07/14/LeetCode-Minimum-Window-Substring/"/>
    <id>http://blog.noobsky.com/2016/07/14/LeetCode-Minimum-Window-Substring/</id>
    <published>2016-07-14T15:54:36.000Z</published>
    <updated>2016-07-15T04:00:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p>
<p>For example,<br>S = “ADOBECODEBANC”<br>T = “ABC”<br>Minimum window is “BANC”.</p>
<p>Note:<br>If there is no such window in S that covers all characters in T, return the empty string “”.</p>
<p>If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.</p>
<h2 id="代码">代码</h2><p>基本思想就是使用两个指针start和end来表示一个滑动窗口。将end指针往后移动，找到一个有效窗口，包含t中所有字符。当得到一个有效窗口后，将start指针往前移动缩小窗口来找到一个最小的窗口。当然start指针往前移动的过程中要保证窗口是有效，即要包含t中所有的字符，如果窗口无效时要继续讲end指针往前移动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本思想就是使用两个指针start和end来表示一个滑动窗口</span></span><br><span class="line">    <span class="comment">// 将end指针往后移动，找到一个有效窗口，包含t中所有字符</span></span><br><span class="line">    <span class="comment">// 当得到一个有效窗口后，将start指针往前移动缩小窗口来找到一个最小的窗口</span></span><br><span class="line">    <span class="comment">// 当然start指针往前移动的过程中要保证窗口是有效，即要包含t中所有的字符，如果窗口无效时要继续讲end指针往前移动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//假设只有ASCII字符</span></span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="comment">//统计t中每个字符出现的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            map[t.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, counter = t.length();</span><br><span class="line">        <span class="keyword">int</span> minLen = Integer.MAX_VALUE, minStart = <span class="number">0</span>;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(end &lt; s.length())&#123;</span><br><span class="line">            <span class="comment">//如果s中字符也在t中，counter--</span></span><br><span class="line">            <span class="keyword">if</span>(map[s.charAt(end)] &gt; <span class="number">0</span>) counter--;</span><br><span class="line">            <span class="comment">//如果s中的该字符没在t中出现，map[s.charAt[end]]会变成负数</span></span><br><span class="line">            map[s.charAt(end)]--;</span><br><span class="line">            end++;</span><br><span class="line">            <span class="comment">//我们找到了一个有效的窗口，start-end，该窗口中字符包含了t中的所有字符</span></span><br><span class="line">            <span class="keyword">while</span>(counter == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end -start &lt; minLen)&#123;</span><br><span class="line">                    <span class="comment">//记录窗口的长度和开始位置</span></span><br><span class="line">                    minLen = end - start;</span><br><span class="line">                    minStart = start;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将start往前移动，缩小滑动窗口</span></span><br><span class="line">                map[s.charAt(start)]++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//说明该符号也是t中的元素</span></span><br><span class="line">                <span class="keyword">if</span>(map[s.charAt(start)] &gt; <span class="number">0</span>) counter++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(minLen != Integer.MAX_VALUE) <span class="keyword">return</span> s.substring(minStart, minStart + minLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里自己使用数组模拟了一个HashMap，也可以使用Java中的HashMap，但速度肯定变慢了：）。上面的代码还有更简洁的写法，但是可读性就没有那么好了：），先拿上来看看吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//假设只有ASCII字符</span></span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="comment">//统计t中每个字符出现的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) map[t.charAt(i)]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, counter = t.length(), minLen = Integer.MAX_VALUE, minStart = <span class="number">0</span>;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(end &lt; s.length())&#123;</span><br><span class="line">            <span class="comment">//如果s中字符也在t中，counter--</span></span><br><span class="line">            <span class="comment">//如果s中的该字符没在t中出现，map[s.charAt[end]]会变成负数</span></span><br><span class="line">            <span class="keyword">if</span>(map[s.charAt(end++)]-- &gt; <span class="number">0</span>) counter--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//我们找到了一个有效的窗口，start-end，该窗口中字符包含了t中的所有字符</span></span><br><span class="line">            <span class="keyword">while</span>(counter == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end -start &lt; minLen) minLen = end - (minStart = start);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将start往前移动，缩小滑动窗口</span></span><br><span class="line">                <span class="comment">//说明该符号也是t中的元素</span></span><br><span class="line">                <span class="keyword">if</span>(map[s.charAt(start++)]++ == <span class="number">0</span>) counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minLen != Integer.MAX_VALUE ? s.substring(minStart, minStart + minLen) : <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有个大神根据这个解法给出一个解决substring问题的模板：）。对于大多数substring问题，一般是给定一个字符串让我们查找满足一些限制条件的substring。一般的方法就是使用HashMap和两个指针。模板如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSubstring</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用数组模拟hashmap</span></span><br><span class="line">    <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="comment">//用于检查窗口中substring是否有效</span></span><br><span class="line">    <span class="keyword">int</span> counter; <span class="comment">// check whether the substring is valid</span></span><br><span class="line">    <span class="comment">//两个指针，一个指向窗口头部，一个指向窗口尾部</span></span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;<span class="comment">//two pointers, one point to tail and one  head</span></span><br><span class="line">    <span class="comment">//子字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> d;<span class="comment">//the length of substring</span></span><br><span class="line">    <span class="comment">//用于初始化hashmap</span></span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;<span class="comment">/* initialize the hash map here */</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(end &lt; s.length())&#123;</span><br><span class="line">        <span class="comment">//满足条件时修改计数器</span></span><br><span class="line">        <span class="keyword">if</span>(map[s.charAt(end++)]-- ?)&#123; <span class="comment">/* modify counter here */</span> &#125;</span><br><span class="line">        <span class="comment">//当计算器满足条件时进入循环</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="comment">/* counter condition */</span>)&#123;</span><br><span class="line">            <span class="comment">//如果找到更小的值，更新d</span></span><br><span class="line">            <span class="comment">/* update d here if finding minimum*/</span></span><br><span class="line">            <span class="comment">//将begin指针往前移动使得窗口无效/有效</span></span><br><span class="line">            <span class="comment">//increase begin to make it invalid/valid again</span></span><br><span class="line">            <span class="comment">//修改计数器</span></span><br><span class="line">            <span class="keyword">if</span>(map[s.charAt(begin++)++ ?])&#123;<span class="comment">/*modify counter here*/</span>&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* update d here if finding maximum*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当要求查找的是最大substring，我们需要在内层while循环结束之后才更新最大值因为内层循环来保证substring是有效的。而如果是查找最小的substring，我们在内层while循环中更新最小值。</p>
<p>应用此模板解决Longest Substring with At Most Two Distinct Characters的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>, counter = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(end &lt; s.length())&#123;</span><br><span class="line">            <span class="comment">//没有出现过的字符，计算器加1</span></span><br><span class="line">            <span class="keyword">if</span>(map[s.charAt(end++)]++ == <span class="number">0</span>) counter++;</span><br><span class="line">            <span class="comment">//不同的字符大于两个，移动指针使窗口重新有效</span></span><br><span class="line">            <span class="comment">//如果begin指向的字符只出现了一次，移动begin指针后，有效字符减1</span></span><br><span class="line">            <span class="keyword">while</span>(counter &gt; <span class="number">2</span>) <span class="keyword">if</span>(map[s.charAt(begin++)]-- == <span class="number">1</span>) counter--;</span><br><span class="line">            d = Math.max(d, end - begin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>解决Longest Substring Without Repeating Characters的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>, counter = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (end &lt; s.length()) &#123;</span><br><span class="line">            <span class="comment">//大于0说明出现重复字符</span></span><br><span class="line">            <span class="keyword">if</span> (map[s.charAt(end++)]++ &gt; <span class="number">0</span>) counter++;</span><br><span class="line">            <span class="keyword">while</span> (counter &gt; <span class="number">0</span>) <span class="keyword">if</span> (map[s.charAt(begin++)]-- &gt; <span class="number">1</span>) counter--;</span><br><span class="line">            d = Math.max(d, end - begin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in comple]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Create Maximum Number]]></title>
    <link href="http://blog.noobsky.com/2016/07/14/LeetCode-Create-Maximum-Number/"/>
    <id>http://blog.noobsky.com/2016/07/14/LeetCode-Create-Maximum-Number/</id>
    <published>2016-07-14T11:11:37.000Z</published>
    <updated>2016-07-14T11:18:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k &lt;= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.</p>
<p>Example 1:<br>nums1 = [3, 4, 6, 5]<br>nums2 = [9, 1, 2, 5, 8, 3]<br>k = 5<br>return [9, 8, 6, 5, 3]</p>
<p>Example 2:<br>nums1 = [6, 7]<br>nums2 = [6, 0, 4]<br>k = 5<br>return [6, 7, 6, 0, 4]</p>
<p>Example 3:<br>nums1 = [3, 9]<br>nums2 = [8, 9]<br>k = 3<br>return [9, 8, 9]</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 从数组nums中挑选出t个数，在保持元素相对顺序不变的情况下，使得选出的子数组最大化。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在保持元素相对顺序不变的前提下，将数组nums1与数组nums2合并，使合并后的数组最大化。</span><br></pre></td></tr></table></figure>
<p>第一个子问题见<a href="http://noobsky.com/2016/06/20/LeetCode-Largest-Number/" target="_blank" rel="external">Delete Digits</a>。也可以用<a href="http://noobsky.com/2016/07/02/LeetCode-Remove-Duplicate-Letters/" target="_blank" rel="external">Remove Duplicate Letters</a>。</p>
<p>枚举第一个数组nums1的个数i，那么数组nums2的个数就确定了 k -i。</p>
<p>然后枚举出nums1和nums2长度分别为i和k-i的最大子数组，（可以用栈，类似leetcode Remove Duplicate Letters）</p>
<p>最后组合看看哪个大。</p>
<p>组合的过程类似合并排序，看看哪个数组大，就选哪个。</p>
<p>枚举数组长度复杂度O(k)，找出最大子数组O(n)，合并的话O(k^2)</p>
<p>而k最坏是m+n,所以总的复杂度就是O((m+n)^3)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//最后k个数有i个来自数组1，则k-i个来自数组2，0&lt;= i &lt;= k</span></span><br><span class="line">    <span class="comment">//所以我们要在数组1中在保持元素相对顺序不变的情况下，选择i个元素组成的数最大</span></span><br><span class="line">    <span class="comment">//同理要在数组2中在保持元素相对顺序不变的情况下，选择k-i个元素组成的数最大</span></span><br><span class="line">    <span class="comment">//然后将选出来的两个子数组合并，类似归并排序中的merge操作，要在保持元素相对顺序的时候组成的数更大</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单的说就是：枚举nums1子数组与nums2子数组的长度i, k-i，分别求解最大子数组，并进行合并。</span></span><br><span class="line">    <span class="comment">//然后从合并得到的子数组中取最大数组即为所求。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxNumber(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length, len2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="comment">//如果k &gt; len2，那么在nums1中至少要选k - len2个</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = Math.max(<span class="number">0</span>, k - len2); i &lt;= k &amp;&amp; i &lt;= len1; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);</span><br><span class="line">            <span class="keyword">if</span>(greater(candidate, <span class="number">0</span>, ans, <span class="number">0</span>)) ans = candidate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将nums1和nums2中的k位数合并，使合并后的数最大（不能改变元素的原始相对顺序）</span></span><br><span class="line">    <span class="comment">//merge函数也可以不借助于greater函数来实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; k; r++)&#123;</span><br><span class="line">            ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该函数本来只用来比较候选者candidate组成的数是否比ans的大，nums1和nums2merge的过程也可以使用</span></span><br><span class="line">    <span class="comment">//此时的作用是nums1[i...nums1.length]字典序是否比num2[j...nums2.length]的大</span></span><br><span class="line">    <span class="comment">//在merge函数中，我们将使用该函数来决定是先用nums1[i]还是nums2[j]来组合数使得组合的数更大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> i, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="comment">//跳过相等的元素</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.length &amp;&amp; j &lt; nums2.length &amp;&amp; nums1[i] == nums2[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == nums2.length || (i &lt; nums1.length &amp;&amp; nums1[i] &gt; nums2[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从nums数组中在保持元素相对顺序不变的情况下选择长度为k的最大子数组（这里最大是指k个元素组成的最大）</span></span><br><span class="line">    <span class="comment">//或者说从nums数组中在保持元素相对顺序不变的情况下选择最大的k位数</span></span><br><span class="line">    <span class="comment">//比如nums[9, 1, 2, 5, 8, 3], k = 3，则结果为[9, 8, 3]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxArray(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= nums.length) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//对于每个nums[i]，在ans中选择一个合适的位置放置</span></span><br><span class="line">            <span class="comment">//将nums[i]跟ans已有的元素从后往前比较（ans[j-1...0]），如果nums[i]大于ans末尾中元素，删掉ans末尾的元素</span></span><br><span class="line">            <span class="comment">//当然在这个过程中要保证剩下的元素够k个，只需保证nums.length - i + j &gt; k，</span></span><br><span class="line">            <span class="comment">//（nums.length - i为nums重剩下的元素，j是已经找到的数）</span></span><br><span class="line">            <span class="comment">//在Delete digits中，我们采用的时不断删数的方法，这里是数组，删数要移动费时间</span></span><br><span class="line">            <span class="keyword">while</span>(nums.length - i + j &gt; k &amp;&amp; j &gt; <span class="number">0</span> &amp;&amp; ans[j - <span class="number">1</span>] &lt; nums[i]) j--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j &lt; k) ans[j++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Longest Valid Parentheses]]></title>
    <link href="http://blog.noobsky.com/2016/07/13/LeetCode-Longest-Valid-Parentheses/"/>
    <id>http://blog.noobsky.com/2016/07/13/LeetCode-Longest-Valid-Parentheses/</id>
    <published>2016-07-13T15:56:33.000Z</published>
    <updated>2016-07-14T03:35:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>
<p>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</p>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用栈匹配括号，最后不匹配的括号都留在栈中，为了后面求长度，我们栈中存括号的下标</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="comment">//左括号直接进栈</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span>)&#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            <span class="comment">//右括号可以尝试匹配</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty() &amp;&amp; s.charAt(stack.peek()) == <span class="string">'('</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时栈为空，说明括号全部匹配</span></span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty()) <span class="keyword">return</span> len;</span><br><span class="line">        <span class="comment">//栈不为空，里面是不匹配的括号</span></span><br><span class="line">        <span class="keyword">int</span> right = len, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">           left = stack.pop();</span><br><span class="line">           longest = Math.max(longest, right - left - <span class="number">1</span>);</span><br><span class="line">           right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//while对应着最后一个无效括号的下标，它前面还可能有有效括号的长度right是最大长度</span></span><br><span class="line">        longest = Math.max(longest, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实外面的if和else if是可以合并的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用栈匹配括号，最后不匹配的括号都留在栈中，为了后面求长度，我们栈中存括号的下标</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="comment">// //左括号直接进栈</span></span><br><span class="line">            <span class="comment">// if(s.charAt(i) == '(')&#123;</span></span><br><span class="line">            <span class="comment">//     stack.push(i);</span></span><br><span class="line">            <span class="comment">// //右括号可以尝试匹配</span></span><br><span class="line">            <span class="comment">// &#125;else if(s.charAt(i) == ')')&#123;</span></span><br><span class="line">            <span class="comment">//     if(!stack.isEmpty() &amp;&amp; s.charAt(stack.peek()) == '(')&#123;</span></span><br><span class="line">            <span class="comment">//         stack.pop();</span></span><br><span class="line">            <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">            <span class="comment">//         stack.push(i);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">//如果s中只有左右括号的话，if和else if还可以合并如下</span></span><br><span class="line">            <span class="comment">//找到一对配对的括号</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span> &amp;&amp; !stack.isEmpty() &amp;&amp; s.charAt(stack.peek()) == <span class="string">'('</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时栈为空，说明括号全部匹配</span></span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty()) <span class="keyword">return</span> len;</span><br><span class="line">        <span class="comment">//栈不为空，里面是不匹配的括号</span></span><br><span class="line">        <span class="keyword">int</span> right = len, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">           left = stack.pop();</span><br><span class="line">           longest = Math.max(longest, right - left - <span class="number">1</span>);</span><br><span class="line">           right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//while对应着最后一个无效括号的下标，它前面还可能有有效括号的长度right是最大长度</span></span><br><span class="line">        longest = Math.max(longest, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实上面的第二次遍历栈有点多余我们可以只用一遍扫描，在括号匹配时同时计算匹配的最长长度。<strong>该写法推荐</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="comment">//其实我们遍历一遍可以同时把最长长度算了。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">      <span class="keyword">int</span> len = s.length();</span><br><span class="line">      <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">      stack.push(-<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">          <span class="comment">//因为我们加了一个-1，判断栈中为空时不是用isEmpty，需要改为stack.size() &gt; 1</span></span><br><span class="line">          <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span> &amp;&amp; stack.size() &gt; <span class="number">1</span> &amp;&amp; s.charAt(stack.peek()) == <span class="string">'('</span>)&#123;</span><br><span class="line">              <span class="comment">//此时说明我们找到了一对匹配的括号，我们计算匹配括号的长度，并更新匹配的最长长度</span></span><br><span class="line">              stack.pop();</span><br><span class="line">              <span class="comment">//)(())</span></span><br><span class="line">              <span class="comment">//i为当前字符的下标，pop之后栈顶为该次匹配括号前不匹配括号的下标，之差为匹配括号的长度</span></span><br><span class="line">              <span class="comment">//但是pop之后栈有可能为空，所以我们开始之前先将-1压栈，来处理边界情况</span></span><br><span class="line">              longest = Math.max(longest, i - stack.peek());</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              stack.push(i);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不先压栈-1的话就自己判断，<strong>推荐该写法或上一种写法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="comment">//不先压入-1就要自己判断了</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="comment">//因为我们加了一个-1，判断栈中为空时，需要改为stack.size() &gt; 1</span></span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span> &amp;&amp; !stack.isEmpty() &amp;&amp; s.charAt(stack.peek()) == <span class="string">'('</span>)&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            <span class="keyword">int</span> lastPos = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty()) lastPos = stack.peek();</span><br><span class="line">            longest = Math.max(longest, i - lastPos);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> longest;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该题还可以使用DP，代码也很简洁，先来看一下状态转移方程。<br>longest[i]表示以s[i]结尾的最长有效括号<br>if s[i] == ‘(‘，longest[i] = 0<br>else if s[i] == ‘)’<br>    if s[i-1] == ‘(‘ longest[i] = longest[i-2] + 2<br>    else if s[i-1] == ‘)’ &amp;&amp; s[i - longest[i-1] - 1] == ‘(‘, longest[i] = longest[i-1] + 2 + longest[i-longest[i-1]-2]</p>
<p>其实第三种情况已经包含了第二种情况，所以代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] longest = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span> &amp;&amp; i - longest[i-<span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - longest[i-<span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>)&#123;</span><br><span class="line">                longest[i] = longest[i-<span class="number">1</span>] + <span class="number">2</span> + ((i - longest[i-<span class="number">1</span>] - <span class="number">2</span> &gt;= <span class="number">0</span>) ? longest[i - longest[i-<span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">                max = Math.max(max, longest[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) pare]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Candy]]></title>
    <link href="http://blog.noobsky.com/2016/07/13/LeetCode-Candy/"/>
    <id>http://blog.noobsky.com/2016/07/13/LeetCode-Candy/</id>
    <published>2016-07-13T14:45:46.000Z</published>
    <updated>2016-07-13T14:48:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>There are N children standing in a line. Each child is assigned a rating value.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<ul>
<li>Each child must have at least one candy.</li>
<li>Children with a higher rating get more candies than their neighbors.<br>What is the minimum candies you must give?</li>
</ul>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化所有小孩的糖为1，然后从前往后扫描，如果第i个小孩的等级比i-1个小孩的等级高，那么i小孩的糖数目等于i-1小孩的糖数目+1</span></span><br><span class="line">    <span class="comment">//最后从后往前遍历扫描，如果第i-1个小孩的等级比i高但糖的数目却小于或等于，那么i-1的糖数目等于i糖数目+1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ratings == <span class="keyword">null</span> || ratings.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[ratings.length];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(nums, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ratings.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i-<span class="number">1</span>])&#123;</span><br><span class="line">                nums[i] = nums[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时在这个循环也可以统计糖的总和，但是为了可读性还是再开一个循环吧</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ratings.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i-<span class="number">1</span>] &gt; ratings[i] &amp;&amp; nums[i-<span class="number">1</span>] &lt;= nums[i]) nums[i-<span class="number">1</span>] = nums[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//if(ratings[i-1] &gt; ratings[i]) nums[i-1] = Math.max(nums[i] + 1, nums[i-1]);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>There are N children standing in a line. Each child is assigned a rating value.</p>
<p>You are giving candies to t]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Maximal Rectangle]]></title>
    <link href="http://blog.noobsky.com/2016/07/13/LeetCode-Maximal-Rectangle/"/>
    <id>http://blog.noobsky.com/2016/07/13/LeetCode-Maximal-Rectangle/</id>
    <published>2016-07-13T10:49:54.000Z</published>
    <updated>2016-07-13T14:14:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing all ones and return its area.</p>
<h2 id="代码">代码</h2><p>可以直接利用<a href="http://noobsky.com/2016/07/13/LeetCode-Largest-Rectangle-in-Histogram/" target="_blank" rel="external">Largest Rectangle in Histogram</a>的思想。<br>You can maintain a row length of Integer array H recorded its height of ‘1’s, and scan and update row by row to find out the largest rectangle of each row.</p>
<p>For each row, if matrix[row][i] == ‘1’. H[i] +=1, or reset the H[i] to zero.<br>and accroding the algorithm of [Largest Rectangle in Histogram], to update the maximum area.</p>
<p>如果我们把每一行看成x坐标，那高度就是从那一行开始往上数的连续1的个数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>||matrix[<span class="number">0</span>].length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cLen = matrix[<span class="number">0</span>].length;    <span class="comment">// column length</span></span><br><span class="line">        <span class="keyword">int</span> rLen = matrix.length;       <span class="comment">// row length</span></span><br><span class="line">        <span class="comment">// height array</span></span><br><span class="line">        <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[cLen+<span class="number">1</span>];</span><br><span class="line">        h[cLen]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row=<span class="number">0</span>;row&lt;rLen;row++) &#123;</span><br><span class="line">            Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cLen+<span class="number">1</span>;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i&lt;cLen)</span><br><span class="line">                    <span class="keyword">if</span>(matrix[row][i]==<span class="string">'1'</span>)</span><br><span class="line">                        h[i]+=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> h[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s.isEmpty()||h[s.peek()]&lt;=h[i])</span><br><span class="line">                    s.push(i);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!s.isEmpty()&amp;&amp;h[i]&lt;h[s.peek()])&#123;</span><br><span class="line">                        <span class="keyword">int</span> top = s.pop();</span><br><span class="line">                        <span class="keyword">int</span> area = h[top]*(s.isEmpty()?i:(i-s.peek()-<span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">if</span> (area&gt;max)</span><br><span class="line">                            max = area;</span><br><span class="line">                    &#125;</span><br><span class="line">                    s.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以下代码更模块化一点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] height = <span class="keyword">new</span> <span class="keyword">int</span>[matrix[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[<span class="number">0</span>][i] == <span class="string">'1'</span>) height[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = largestInLine(height);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; matrix.length; i ++)&#123;</span><br><span class="line">            resetHeight(matrix, height, i);</span><br><span class="line">            result = Math.max(result, largestInLine(height));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetHeight</span><span class="params">(<span class="keyword">char</span>[][] matrix, <span class="keyword">int</span>[] height, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[idx][i] == <span class="string">'1'</span>) height[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> height[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestInLine</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> h = (i == len ? <span class="number">0</span> : height[i]);</span><br><span class="line">            <span class="keyword">if</span>(s.isEmpty() || h &gt;= height[s.peek()])&#123;</span><br><span class="line">                s.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> tp = s.pop();</span><br><span class="line">                maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - <span class="number">1</span> - s.peek()));</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实也可以用先用二维数组先计算height在每一行时对应的值。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = matrix.length;</span><br><span class="line"><span class="keyword">int</span> n = m == <span class="number">0</span> ? <span class="number">0</span> : matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span>[][] height = <span class="keyword">new</span> <span class="keyword">int</span>[m][n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(matrix[i][j] == <span class="string">'0'</span>)&#123;</span><br><span class="line">             height[i][j] = <span class="number">0</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             height[i][j] = i == <span class="number">0</span> ? <span class="number">1</span> : height[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>详见博文<a href="http://www.cnblogs.com/lichen782/p/leetcode_maximal_rectangle.html" target="_blank" rel="external">LeetCode 笔记系列 18 Maximal Rectangle 学以致用</a></p>
<p> 讨论区还有一种<a href="https://discuss.leetcode.com/topic/6650/share-my-dp-solution" target="_blank" rel="external">dp的解法</a>，有时间再研究吧：</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> m = matrix.size();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> left[n], right[n], height[n];</span><br><span class="line">        fill_n(left,n,<span class="number">0</span>); fill_n(right,n,n); fill_n(height,n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> maxA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_left=<span class="number">0</span>, cur_right=n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123; <span class="comment">// compute height (can do this from either side)</span></span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>) height[j]++;</span><br><span class="line">                <span class="keyword">else</span> height[j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123; <span class="comment">// compute left (from left to right)</span></span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>) left[j]=max(left[j],cur_left);</span><br><span class="line">                <span class="keyword">else</span> &#123;left[j]=<span class="number">0</span>; cur_left=j+<span class="number">1</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// compute right (from right to left)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">'1'</span>) right[j]=min(right[j],cur_right);</span><br><span class="line">                <span class="keyword">else</span> &#123;right[j]=n; cur_right=j;&#125;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// compute the area of rectangle (can do this from either side)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">                maxA = max(maxA,(right[j]-left[j])*height[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing all ones and return its ar]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
</feed>
