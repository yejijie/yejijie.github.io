<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[NoobSky]]></title>
  <subtitle><![CDATA[Talk is cheap. Show me the code. - http://noobsky.com]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.noobsky.com/"/>
  <updated>2016-09-01T06:51:42.000Z</updated>
  <id>http://blog.noobsky.com/</id>
  
  <author>
    <name><![CDATA[Jaye]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[[LeetCode]Find the Difference]]></title>
    <link href="http://blog.noobsky.com/2016/09/01/LeetCode-Find-the-Difference/"/>
    <id>http://blog.noobsky.com/2016/09/01/LeetCode-Find-the-Difference/</id>
    <published>2016-09-01T06:43:35.000Z</published>
    <updated>2016-09-01T06:51:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<p><strong>Example:</strong></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Input:</span></span><br><span class="line">s = <span class="string">"abcd"</span></span><br><span class="line">t = <span class="string">"abcde"</span></span><br><span class="line"></span><br><span class="line"><span class="label">Output:</span></span><br><span class="line">e</span><br><span class="line"></span><br><span class="line"><span class="label">Explanation:</span></span><br><span class="line"><span class="string">'e'</span> is the letter that was added.</span><br></pre></td></tr></table></figure>
<h2 id="解题思路与代码">解题思路与代码</h2><p>这个题类似<a href="http://noobsky.com/2016/05/13/LeetCode-Single-Number-I-II-III/" target="_blank" rel="external">Single Number</a>，也就是两个字符串除了一个字符以外，其他字符都是两两相等，找出只出现一次的字符。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            ch ^= s.charAt(i);</span><br><span class="line">            ch ^= t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ch ^= t.charAt(t.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shufflin]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战之扩展Redis]]></title>
    <link href="http://blog.noobsky.com/2016/08/31/Redis%E5%AE%9E%E6%88%98%E4%B9%8B%E6%89%A9%E5%B1%95Redis/"/>
    <id>http://blog.noobsky.com/2016/08/31/Redis实战之扩展Redis/</id>
    <published>2016-08-31T11:35:36.000Z</published>
    <updated>2016-08-31T12:12:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="扩展读性能">扩展读性能</h2><p>主从复制，读写分离<br>只对主服务器进行写入，从从服务器读取<br>解决主从服务器同步问题的一个方法，就是减少主服务器需要传送给从服务器的数据数量，可以通过构建树状复制中间层来完成。</p>
<p>Redis Sentinel可以配合Redis的复制功能使用，并对线下的主服务器进行故障转移。</p>
<p>Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。</p>
<p>它的主要功能有以下几点</p>
<p>不时地监控redis是否按照预期良好地运行;<br>如果发现某个redis节点运行出现状况，能够通知另外一个进程(例如它的客户端);<br>能够进行自动切换。当一个master节点不可用时，能够选举出master的多个slave(如果有超过一个slave的话)中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。</p>
<p>##</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="扩展读性能">扩展读性能</h2><p>主从复制，读写分离<br>只对主服务器进行写入，从从服务器读取<br>解决主从服务器同步问题的一个方法，就是减少主服务器需要传送给从服务器的数据数量，可以通过构建树状复制中间层来完成。</p>
<p>Redis Sentin]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战之降低内存占用]]></title>
    <link href="http://blog.noobsky.com/2016/08/31/Redis%E5%AE%9E%E6%88%98%E4%B9%8B%E9%99%8D%E4%BD%8E%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/"/>
    <id>http://blog.noobsky.com/2016/08/31/Redis实战之降低内存占用/</id>
    <published>2016-08-31T09:15:16.000Z</published>
    <updated>2016-08-31T11:35:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="短结构">短结构</h2><p>在列表、散列和有序集合的长度较短或者体积较小的时候，Redis可以选择使用一种名为压缩列表(ziplist)的紧凑存储方式来存储。压缩列表以序列化的方式存储数据，序列化数据每次被读取的时候都要进行解码，每次被写入的时候也要进行局部的重新编码，并且可能对内存里面的数据进行移动。</p>
<h3 id="压缩列表表示">压缩列表表示</h3><h3 id="使用压缩列表编码">使用压缩列表编码</h3><p>不同结构使用压缩列表表示的配置选项：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list-<span class="built_in">max</span>-ziplist-entries <span class="number">512</span></span><br><span class="line">list-<span class="built_in">max</span>-ziplist-<span class="keyword">value</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line">hash-<span class="built_in">max</span>-ziplist-entries <span class="number">512</span></span><br><span class="line">hash-<span class="built_in">max</span>-ziplist-<span class="keyword">value</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line">zset-<span class="built_in">max</span>-ziplist-entries <span class="number">512</span></span><br><span class="line">zset-<span class="built_in">max</span>-ziplist-<span class="keyword">value</span> <span class="number">64</span></span><br></pre></td></tr></table></figure></p>
<p>这些选项设置的限制条件任意一个被突破时，Redis就会将相应的列表、散列或有序集合从压缩列表编码转换为其他结构。原因是随着紧凑结构的体积变得越来越大，操作这些结构的速度也会越来越慢。<br>判断一个结构是否被表示为压缩列表的方法:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.rpush(<span class="string">'test'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"><span class="number">4</span>L</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'test'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'ziplist'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">13</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13017227</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d720'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">24</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.rpush(<span class="string">'test'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>)</span><br><span class="line"><span class="number">8</span>L</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'test'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'ziplist'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">4</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13017318</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d720'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">36</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.rpush(<span class="string">'test'</span>, <span class="number">65</span>*<span class="string">'a'</span>)</span><br><span class="line"><span class="number">9</span>L</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'test'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'linkedlist'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">4</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13017354</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d720'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">30</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.rpop(<span class="string">'test'</span>)</span><br><span class="line"><span class="string">'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'test'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'linkedlist'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">5</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13017376</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d720'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">17</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="集合的整数集合编码">集合的整数集合编码</h2><p>集合成员数量足够少，整数又处于平台的有符号整数范围之内，那么Redis就会以有序整数数组的方式存储集合，这种存储方式又被称为整数集合。</p>
<p>配置集合在使用整数集合编码时能够包含的最大元素数量：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>-max-intset-entries <span class="number">512</span></span><br></pre></td></tr></table></figure></p>
<p>当整数集合增长至超出限制大小时，它将被表示为散列表：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.sadd(<span class="string">'set-object'</span>, *range(<span class="number">500</span>))</span><br><span class="line"><span class="number">500</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'set-object'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'intset'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">26</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13021183</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d6f0'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">1010</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.sadd(<span class="string">'set-object'</span>, *range(<span class="number">500</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="number">500</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; conn.debug_object(<span class="string">'set-object'</span>)</span><br><span class="line">&#123;<span class="string">'encoding'</span><span class="symbol">:</span> <span class="string">'hashtable'</span>, <span class="string">'refcount'</span><span class="symbol">:</span> <span class="number">1</span>, <span class="string">'lru_seconds_idle'</span><span class="symbol">:</span> <span class="number">4</span>, <span class="string">'lru'</span><span class="symbol">:</span> <span class="number">13021247</span>, <span class="string">'at'</span><span class="symbol">:</span> <span class="string">'0x7ffaeac7d6f0'</span>, <span class="string">'serializedlength'</span><span class="symbol">:</span> <span class="number">2874</span>, <span class="string">'type'</span><span class="symbol">:</span> <span class="string">'Value'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>压缩列表表示的对象的其中一部分进行读取或者更新，可能会需要对整个压缩列表进行解码，甚至需要对内存里面的数据进行移动，因此读写一个长度较大的压缩列表可能会给性能带来负面的影响。使用整数集合编码也有类似的问题，它在执行插入操作或者删除操作时需要对数据进行移动。</p>
<h2 id="分片结构">分片结构</h2><h3 id="分片散列">分片散列</h3><h3 id="分片集合">分片集合</h3><h2 id="打包存储二进制位和字节">打包存储二进制位和字节</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="短结构">短结构</h2><p>在列表、散列和有序集合的长度较短或者体积较小的时候，Redis可以选择使用一种名为压缩列表(ziplist)的紧凑存储方式来存储。压缩列表以序列化的方式存储数据，序列化数据每次被读取的时候都要进行解码，每次被写入的时候也要进行局部的]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战之数据安全与性能保障]]></title>
    <link href="http://blog.noobsky.com/2016/08/29/Redis%E5%AE%9E%E6%88%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BF%9D%E9%9A%9C/"/>
    <id>http://blog.noobsky.com/2016/08/29/Redis实战之数据安全与性能保障/</id>
    <published>2016-08-29T13:08:13.000Z</published>
    <updated>2016-08-29T13:08:13.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战之Redis命令]]></title>
    <link href="http://blog.noobsky.com/2016/08/29/Redis%E5%AE%9E%E6%88%98%E4%B9%8BRedis%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.noobsky.com/2016/08/29/Redis实战之Redis命令/</id>
    <published>2016-08-29T07:46:13.000Z</published>
    <updated>2016-08-29T12:07:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="字符串">字符串</h2><p>Redis中，字符串可以存储以下3种类型的值</p>
<ul>
<li>字节串(byte string)</li>
<li>整数</li>
<li>浮点数</li>
</ul>
<p>用户可以通过给定一个任意的数值，对存储着整数或者浮点数的字符串执行自增或者自减的操作，Redis还能将整数转换成浮点数。</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">INCR</td>
<td style="text-align:left">INCR key-name————将键存储的值加上1</td>
</tr>
<tr>
<td style="text-align:left">DECR</td>
<td style="text-align:left">DECR key-name————将键存储的值减去1</td>
</tr>
<tr>
<td style="text-align:left">INCRBY</td>
<td style="text-align:left">INCRBY key-name amount————将键存储的值加上整数amount</td>
</tr>
<tr>
<td style="text-align:left">DECRBY</td>
<td style="text-align:left">DECRBY key-name amount————将键存储的值减去整数amount</td>
</tr>
<tr>
<td style="text-align:left">INCRBYFLOAT</td>
<td style="text-align:left">INCRBYFLOAT key-name amount————将键存储的值加上浮点数amount，这个命令在Redis 2.6或以上的版本可用</td>
</tr>
</tbody>
</table>
<p>如果Redis字符串中的值可用被解释为十进制整数或者浮点数，那么Redis能发现这一点，并允许用户对这个字符串执行各种INCR<em>和DECR</em>操作。若用户对不存在的键或者空串的键执行自增或者自减操作，那么Redis在执行操作时会将这个键的值当作是0来处理。如果尝试对无法被解释为整数或者浮点数的字符串键执行自增或者自减操作，Redis会返回一个错误。示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn = redis.Redis()</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.get(<span class="string">'key'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.incr(<span class="string">'key'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.incr(<span class="string">'key'</span>, <span class="number">15</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.decr(<span class="string">'key'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.get(<span class="string">'key'</span>)</span><br><span class="line"><span class="string">'11'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.set(<span class="string">'key'</span>, <span class="string">'13'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.incr(<span class="string">'key'</span>)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>
<p>处理字符串子串和二进制位的命令：<br>| 命令 | 用例和描述     |<br>| :————- | :————- |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |<br>| Item One       | Item Two       |</p>
<p>使用示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.append(<span class="string">'new-string-key'</span>, <span class="string">'hello '</span>)</span><br><span class="line"><span class="number">6L</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.append(<span class="string">'new-string-key'</span>, <span class="string">'world!'</span>)</span><br><span class="line"><span class="number">12L</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.substr(<span class="string">'new-string-key'</span>, <span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="string">'lo wo'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.setrange(<span class="string">'new-string-key'</span>, <span class="number">0</span>, <span class="string">'H'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.setrange(<span class="string">'new-string-key'</span>, <span class="number">6</span>, <span class="string">'W'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.get(<span class="string">'new-string-key'</span>)</span><br><span class="line"><span class="string">'Hello World!'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.setrange(<span class="string">'new-string-key'</span>, <span class="number">11</span>, <span class="string">', how are you?'</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.get(<span class="string">'new-string-key'</span>)</span><br><span class="line"><span class="string">'Hello World, how are you?'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.setbit(<span class="string">'anothor-key'</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.setbit(<span class="string">'anothor-key'</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.get(<span class="string">'anothor-key'</span>)</span><br><span class="line"><span class="string">'!'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="列表">列表</h2><p>列表常用命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">RPUSH</td>
<td style="text-align:left">RPUSH key-name value [value …]————将一个或多个值推入列表的右端</td>
</tr>
<tr>
<td style="text-align:left">LPUSH</td>
<td style="text-align:left">LPUSH key-name value [value …]————将一个或多个值推入列表的左端</td>
</tr>
<tr>
<td style="text-align:left">RPOP</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">LPOP</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">LINDEX</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">LRANGE</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">LTRIM</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<p>使用示例<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.rpush(<span class="string">'list-key'</span>, <span class="string">'last'</span>)</span><br><span class="line"><span class="number">1</span>L</span><br><span class="line">&gt;&gt;&gt; conn.lpush(<span class="string">'list-key'</span>, <span class="string">'first'</span>)</span><br><span class="line"><span class="number">2</span>L</span><br><span class="line">&gt;&gt;&gt; conn.rpush(<span class="string">'list-key'</span>, <span class="string">'new last'</span>)</span><br><span class="line"><span class="number">3</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="keyword">lrange</span>(<span class="string">'list-key'</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">[<span class="string">'first'</span>, <span class="string">'last'</span>, <span class="string">'new last'</span>]</span><br><span class="line">&gt;&gt;&gt; conn.lpop(<span class="string">'list-key'</span>)</span><br><span class="line"><span class="string">'first'</span></span><br><span class="line">&gt;&gt;&gt; conn.lpop(<span class="string">'list-key'</span>)</span><br><span class="line"><span class="string">'last'</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="keyword">lrange</span>(<span class="string">'list-key'</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">[<span class="string">'new last'</span>]</span><br><span class="line">&gt;&gt;&gt; conn.rpush(<span class="string">'list-key'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="number">4</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="keyword">lrange</span>(<span class="string">'list-key'</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">[<span class="string">'new last'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&gt;&gt;&gt; conn.ltrim(<span class="string">'list-key'</span>, <span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; conn.<span class="keyword">lrange</span>(<span class="string">'list-key'</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p>
<p>阻塞式的列表弹出命令以及在列表之间移动元素的命令</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BLPOP</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">BRPOP</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">RPOPLPUSH</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">BRPOPLPUSH</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<p>使用示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.rpush(<span class="string">'list'</span>, <span class="string">'item1'</span>)</span><br><span class="line"><span class="number">1L</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.rpush(<span class="string">'list'</span>, <span class="string">'item2'</span>)</span><br><span class="line"><span class="number">2L</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.rpush(<span class="string">'list2'</span>, <span class="string">'item3'</span>)</span><br><span class="line"><span class="number">1L</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.brpoplpush(<span class="string">'list2'</span>, <span class="string">'list'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">'item3'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.brpoplpush(<span class="string">'list2'</span>, <span class="string">'list'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.lrange(<span class="string">'list'</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">[<span class="string">'item3'</span>, <span class="string">'item1'</span>, <span class="string">'item2'</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.brpoplpush(<span class="string">'list'</span>, <span class="string">'list2'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">'item2'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.blpop([<span class="string">'list'</span>, <span class="string">'list2'</span>], <span class="number">1</span>)</span><br><span class="line">(<span class="string">'list'</span>, <span class="string">'item3'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.blpop([<span class="string">'list'</span>, <span class="string">'list2'</span>], <span class="number">1</span>)</span><br><span class="line">(<span class="string">'list'</span>, <span class="string">'item1'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.blpop([<span class="string">'list'</span>, <span class="string">'list2'</span>], <span class="number">1</span>)</span><br><span class="line">(<span class="string">'list2'</span>, <span class="string">'item2'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>conn.blpop([<span class="string">'list'</span>, <span class="string">'list2'</span>], <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="集合">集合</h2><p>常用集合命令</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<p>使用示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sadd</span><span class="params">(<span class="string">'set-key'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span></span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">srem</span><span class="params">(<span class="string">'set-key'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span></span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">srem</span><span class="params">(<span class="string">'set-key'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span></span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">scard</span><span class="params">(<span class="string">'set-key'</span>)</span></span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">smembers</span><span class="params">(<span class="string">'set-key'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">([<span class="string">'a'</span>, <span class="string">'b'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">smove</span><span class="params">(<span class="string">'set-key'</span>, <span class="string">'set-key2'</span>, <span class="string">'a'</span>)</span></span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">smove</span><span class="params">(<span class="string">'set-key'</span>, <span class="string">'set-key2'</span>, <span class="string">'c'</span>)</span></span></span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">smembers</span><span class="params">(<span class="string">'set-key2'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">([<span class="string">'a'</span>])</span></span></span><br></pre></td></tr></table></figure></p>
<p>用于组合和处理多个集合的Redis命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<p>使用示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sadd</span><span class="params">(<span class="string">'skey1'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span></span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sadd</span><span class="params">(<span class="string">'skey2'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>)</span></span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sdiff</span><span class="params">(<span class="string">'skey1'</span>, <span class="string">'skey2'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">([<span class="string">'a'</span>, <span class="string">'b'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sinter</span><span class="params">(<span class="string">'skey1'</span>, <span class="string">'skey2'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">([<span class="string">'c'</span>, <span class="string">'d'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sunion</span><span class="params">(<span class="string">'skey1'</span>, <span class="string">'skey2'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>])</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="散列">散列</h2><p>添加和删除键值对的散列操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HMGET</td>
<td style="text-align:left">HMGET key-name key [key …]————从散列里面获取一个或多个键的值</td>
</tr>
<tr>
<td style="text-align:left">HMSET</td>
<td style="text-align:left">HMSET key-name key value [key value …]————为散列里面的一个或多个键设置值</td>
</tr>
<tr>
<td style="text-align:left">HDEL</td>
<td style="text-align:left">HMGET key-name key [key …]————删除散列里面一或多个键值对，返回成功找到并删除的数量</td>
</tr>
<tr>
<td style="text-align:left">HLEN</td>
<td style="text-align:left">HMGET key-name————返回散列包含的键值对数量</td>
</tr>
</tbody>
</table>
<p>使用示例：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hmset</span><span class="params">(<span class="string">'hash-key'</span>, &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>, <span class="string">'k2'</span>:<span class="string">'v2'</span>, <span class="string">'k3'</span>:<span class="string">'v3'</span>&#125;)</span></span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hmget</span><span class="params">(<span class="string">'hash-key'</span>, [<span class="string">'k2'</span>, <span class="string">'k3'</span>])</span></span></span><br><span class="line">[<span class="string">'v2'</span>, <span class="string">'v3'</span>]</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hlen</span><span class="params">(<span class="string">'hash-key'</span>)</span></span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hdel</span><span class="params">(<span class="string">'hash-key'</span>, <span class="string">'k1'</span>, <span class="string">'k3'</span>)</span></span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>以下表中列出了散列的其他几个批量操作命令，以及一些和字符串操作类似的散列命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HEXISTS</td>
<td style="text-align:left">HEXISTS key-name key————检查给定键是否存在于散列中</td>
</tr>
<tr>
<td style="text-align:left">HKEYS</td>
<td style="text-align:left">HKEYS key-name————获取散列包含的所有键</td>
</tr>
<tr>
<td style="text-align:left">HVALS</td>
<td style="text-align:left">HVALS key-name————获取散列包含的所有值</td>
</tr>
<tr>
<td style="text-align:left">HGETALL</td>
<td style="text-align:left">HGETALL key-name————获取散列包含的所有键值对</td>
</tr>
<tr>
<td style="text-align:left">HINCRBY</td>
<td style="text-align:left">HINCRBY key-name key increment————将键key存储的值加上整数increment</td>
</tr>
<tr>
<td style="text-align:left">HINCREBYFLOAT</td>
<td style="text-align:left">HINCREBYFLOAT key-name key increment————将键key存储的值加上浮点数increment</td>
</tr>
</tbody>
</table>
<p>使用示例：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hmset</span><span class="params">(<span class="string">'hash-key2'</span>, &#123;<span class="string">'short'</span>:<span class="string">'hello'</span>, <span class="string">'long'</span>:<span class="number">1000</span>*<span class="string">'1'</span>&#125;)</span></span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hkeys</span><span class="params">(<span class="string">'hash-key2'</span>)</span></span></span><br><span class="line">[<span class="string">'short'</span>, <span class="string">'long'</span>]</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hexists</span><span class="params">(<span class="string">'hash-key2'</span>, <span class="string">'num'</span>)</span></span></span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hincrby</span><span class="params">(<span class="string">'hash-key2'</span>, <span class="string">'num'</span>)</span></span></span><br><span class="line"><span class="number">1</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">hexists</span><span class="params">(<span class="string">'hash-key2'</span>, <span class="string">'num'</span>)</span></span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h2 id="有序集合">有序集合</h2><p>常用的有序集合命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD key-name score member [score member …]————将带有给定分值的成员添加到有序集合里面</td>
</tr>
</tbody>
</table>
<p>使用示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zadd</span><span class="params">(<span class="string">'zset-key'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'b'</span>, <span class="number">2</span>, <span class="string">'c'</span>, <span class="number">1</span>)</span></span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zcard</span><span class="params">(<span class="string">'zset-key'</span>)</span></span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zincrby</span><span class="params">(<span class="string">'zset-key'</span>, <span class="string">'c'</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zscore</span><span class="params">(<span class="string">'zset-key'</span>, <span class="string">'b'</span>)</span></span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrank</span><span class="params">(<span class="string">'zset-key'</span>, <span class="string">'c'</span>)</span></span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zcount</span><span class="params">(<span class="string">'zset-key'</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="number">2</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrem</span><span class="params">(<span class="string">'zset-key'</span>, <span class="string">'b'</span>)</span></span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrange</span><span class="params">(<span class="string">'zset-key'</span>, <span class="number">0</span>, -<span class="number">1</span>, withscores=True)</span></span></span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">3.0</span>), (<span class="string">'c'</span>, <span class="number">4.0</span>)]</span><br></pre></td></tr></table></figure></p>
<p>其他非常有用的有序集合命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">用例和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ZREVRANK</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<p>ZINTERSTORE和ZUNIONSTORE的用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zadd</span><span class="params">(<span class="string">'zset-1'</span>, <span class="string">'a'</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="number">2</span>, <span class="string">'c'</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zadd</span><span class="params">(<span class="string">'zset-2'</span>, <span class="string">'b'</span>, <span class="number">4</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="string">'d'</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zinterstore</span><span class="params">(<span class="string">'zset-i'</span>, [<span class="string">'zset-1'</span>, <span class="string">'zset-2'</span>])</span></span></span><br><span class="line"><span class="number">2</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrange</span><span class="params">(<span class="string">'zset-i'</span>, <span class="number">0</span>, -<span class="number">1</span>, withscores=True)</span></span></span><br><span class="line">[(<span class="string">'c'</span>, <span class="number">4.0</span>), (<span class="string">'b'</span>, <span class="number">6.0</span>)]</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zunionstore</span><span class="params">(<span class="string">'zset-u'</span>, [<span class="string">'zset-1'</span>, <span class="string">'zset-2'</span>], aggregate=<span class="string">'min'</span>)</span></span></span><br><span class="line"><span class="number">4</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrange</span><span class="params">(<span class="string">'zset-u'</span>, <span class="number">0</span>, -<span class="number">1</span>, withscores=True)</span></span></span><br><span class="line">[(<span class="string">'d'</span>, <span class="number">0.0</span>), (<span class="string">'a'</span>, <span class="number">1.0</span>), (<span class="string">'c'</span>, <span class="number">1.0</span>), (<span class="string">'b'</span>, <span class="number">2.0</span>)]</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">sadd</span><span class="params">(<span class="string">'set-1'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>)</span></span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zunionstore</span><span class="params">(<span class="string">'zset-u2'</span>, [<span class="string">'zset-1'</span>, <span class="string">'zset-2'</span>, <span class="string">'set-1'</span>])</span></span></span><br><span class="line"><span class="number">4</span>L</span><br><span class="line">&gt;&gt;&gt; conn.<span class="function"><span class="title">zrange</span><span class="params">(<span class="string">'zset-u2'</span>, <span class="number">0</span>, -<span class="number">1</span>, withscores=True)</span></span></span><br><span class="line">[(<span class="string">'d'</span>, <span class="number">1.0</span>), (<span class="string">'a'</span>, <span class="number">2.0</span>), (<span class="string">'c'</span>, <span class="number">4.0</span>), (<span class="string">'b'</span>, <span class="number">6.0</span>)]</span><br></pre></td></tr></table></figure></p>
<h2 id="发布与订阅">发布与订阅</h2><h2 id="其他命令">其他命令</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="字符串">字符串</h2><p>Redis中，字符串可以存储以下3种类型的值</p>
<ul>
<li>字节串(byte string)</li>
<li>整数</li>
<li>浮点数</li>
</ul>
<p>用户可以通过给定一个任意的数值，对存储着整数或者]]>
    </summary>
    
      <category term="Redis" scheme="http://blog.noobsky.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战之使用Redis构建Web应用]]></title>
    <link href="http://blog.noobsky.com/2016/08/29/Redis%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BD%BF%E7%94%A8Redis%E6%9E%84%E5%BB%BAWeb%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.noobsky.com/2016/08/29/Redis实战之使用Redis构建Web应用/</id>
    <published>2016-08-29T07:17:14.000Z</published>
    <updated>2016-08-29T07:17:14.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis实战]]></title>
    <link href="http://blog.noobsky.com/2016/08/28/Redis%E5%AE%9E%E6%88%98/"/>
    <id>http://blog.noobsky.com/2016/08/28/Redis实战/</id>
    <published>2016-08-28T13:38:44.000Z</published>
    <updated>2016-08-31T12:30:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Redis数据结构简介">Redis数据结构简介</h2><ul>
<li>STRING(字符串)</li>
<li>LIST(列表)</li>
<li>SET(集合)</li>
<li>HASH(散列)</li>
<li>ZSET(有序集合)</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Header One</th>
<th style="text-align:left">Header Two</th>
<th style="text-align:left">Header Two</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<h3 id="字符串">字符串</h3><p>示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&#62; set hello world&#10;OK&#10;127.0.0.1:6379&#62; get hello&#10;&#34;world&#34;&#10;127.0.0.1:6379&#62; del hello&#10;(integer) 1&#10;127.0.0.1:6379&#62; get hello&#10;(nil)</span><br></pre></td></tr></table></figure></p>
<h3 id="列表">列表</h3><p>示例：<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush <span class="keyword">list</span>-key item</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush <span class="keyword">list</span>-key item2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush <span class="keyword">list</span>-key item</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lrange</span> <span class="keyword">list</span>-key <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"item"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"item2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"item"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpop <span class="keyword">list</span>-key</span><br><span class="line"><span class="string">"item"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lrange</span> <span class="keyword">list</span>-key <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"item2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"item"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="集合">集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sadd</span> <span class="tag">set-key</span> <span class="tag">item</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sadd</span> <span class="tag">set-key</span> <span class="tag">item2</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sadd</span> <span class="tag">set-key</span> <span class="tag">item3</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sadd</span> <span class="tag">set-key</span> <span class="tag">item</span></span><br><span class="line">(<span class="tag">integer</span>) 0</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">smembers</span> <span class="tag">set-key</span></span><br><span class="line">1) "<span class="tag">item2</span>"</span><br><span class="line">2) "<span class="tag">item3</span>"</span><br><span class="line">3) "<span class="tag">item</span>"</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sismember</span> <span class="tag">set-key</span> <span class="tag">item4</span></span><br><span class="line">(<span class="tag">integer</span>) 0</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">sismember</span> <span class="tag">set-key</span> <span class="tag">item</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">srem</span> <span class="tag">set-key</span> <span class="tag">item2</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">srem</span> <span class="tag">set-key</span> <span class="tag">item2</span></span><br><span class="line">(<span class="tag">integer</span>) 0</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">smembers</span> <span class="tag">set-key</span></span><br><span class="line">1) "<span class="tag">item3</span>"</span><br><span class="line">2) "<span class="tag">item</span>"</span><br></pre></td></tr></table></figure>
<h3 id="散列">散列</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset hash-key<span class="instruction"> sub-key1 </span>value1</span><br><span class="line">(integer<span class="function">)</span> 0</span><br><span class="line">127.0.0.1:6379&gt; hset hash-key<span class="instruction"> sub-key2 </span>value2</span><br><span class="line">(integer<span class="function">)</span> 0</span><br><span class="line">127.0.0.1:6379&gt; hset hash-key<span class="instruction"> sub-key1 </span>value1</span><br><span class="line">(integer<span class="function">)</span> 0</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash-key</span><br><span class="line">1<span class="function">)</span> <span class="string">"sub-key1"</span></span><br><span class="line">2<span class="function">)</span> <span class="string">"value1"</span></span><br><span class="line">3<span class="function">)</span> <span class="string">"sub-key2"</span></span><br><span class="line">4<span class="function">)</span> <span class="string">"value2"</span></span><br><span class="line">127.0.0.1:6379&gt; hdel hash-key<span class="instruction"> sub-key2</span><br><span class="line"></span>(integer<span class="function">)</span> 1</span><br><span class="line">127.0.0.1:6379&gt; hdel hash-key<span class="instruction"> sub-key2</span><br><span class="line"></span>(integer<span class="function">)</span> 0</span><br><span class="line">127.0.0.1:6379&gt; hget hash-key<span class="instruction"> sub-key1</span><br><span class="line"></span><span class="string">"value1"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall hash-key</span><br><span class="line">1<span class="function">)</span> <span class="string">"sub-key1"</span></span><br><span class="line">2<span class="function">)</span> <span class="string">"value1"</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">行为</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HSET</td>
<td style="text-align:left">在散列里面关联给定的键值对</td>
</tr>
<tr>
<td style="text-align:left">HGET</td>
<td style="text-align:left">获取指定散列键的值</td>
</tr>
<tr>
<td style="text-align:left">HGETALL</td>
<td style="text-align:left">获取散列包含的所有的键值对</td>
</tr>
<tr>
<td style="text-align:left">HDEL</td>
<td style="text-align:left">如果给定键存在于散列里面，那么移除这个键</td>
</tr>
</tbody>
</table>
<h3 id="有序集合">有序集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zadd</span> <span class="tag">zset-key</span> 728 <span class="tag">member1</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zadd</span> <span class="tag">zset-key</span> 982 <span class="tag">member0</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zadd</span> <span class="tag">zset-key</span> 982 <span class="tag">member0</span></span><br><span class="line">(<span class="tag">integer</span>) 0</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zrange</span> <span class="tag">zset-key</span> 0 <span class="tag">-1</span> <span class="tag">withscores</span></span><br><span class="line">1) "<span class="tag">member1</span>"</span><br><span class="line">2) "728"</span><br><span class="line">3) "<span class="tag">member0</span>"</span><br><span class="line">4) "982"</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zrangebyscore</span> <span class="tag">zset-key</span> 0 800 <span class="tag">withscores</span></span><br><span class="line">1) "<span class="tag">member1</span>"</span><br><span class="line">2) "728"</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zrem</span> <span class="tag">zset-key</span> <span class="tag">member1</span></span><br><span class="line">(<span class="tag">integer</span>) 1</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zrem</span> <span class="tag">zset-key</span> <span class="tag">member1</span></span><br><span class="line">(<span class="tag">integer</span>) 0</span><br><span class="line">127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:6379</span>&gt; <span class="tag">zrange</span> <span class="tag">zset-key</span> 0 <span class="tag">-1</span> <span class="tag">withscores</span></span><br><span class="line">1) "<span class="tag">member0</span>"</span><br><span class="line">2) "982"</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">行为</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">将一个带有给定分值的成员添加到有序集合里面</td>
</tr>
<tr>
<td style="text-align:left">ZRANGE</td>
<td style="text-align:left">根据元素在有序排列中所处的位置，从有序集合里面获取多个元素</td>
</tr>
<tr>
<td style="text-align:left">ZRANGEBYSCORE</td>
<td style="text-align:left">获取有序集合在给定分值范围内的所有元素</td>
</tr>
<tr>
<td style="text-align:left">ZREM</td>
<td style="text-align:left">如果给定成员存在于有序集合，那么移除这个成员</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Redis数据结构简介">Redis数据结构简介</h2><ul>
<li>STRING(字符串)</li>
<li>LIST(列表)</li>
<li>SET(集合)</li>
<li>HASH(散列)</li>
<li>ZSET(有序集合)</li>
</ul]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyISAM和InnoDB的区别]]></title>
    <link href="http://blog.noobsky.com/2016/08/24/MyISAM%E5%92%8CInnoDB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.noobsky.com/2016/08/24/MyISAM和InnoDB的区别/</id>
    <published>2016-08-24T13:45:19.000Z</published>
    <updated>2016-08-24T13:53:34.000Z</updated>
    <content type="html"><![CDATA[<p>InnoDB支持事务，MyISAM不支持事务<br>InnoDB支持行锁，MyISAM使用表锁<br>InnoDB支持外键，MyISAM不支持外键<br>InnoDB在1.2（MySQL5.6.4）之后才支持全文索引，MyISAM支持索引</p>
<p>Here is a small overview of which type you should use in which situation:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="header">                                                 MyISAM   InnoDB</span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line"><span class="header">Required full-text search                        Yes      5.6.4</span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line"><span class="header">Require transactions                                      Yes</span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line"><span class="header">Frequent select queries                          Yes      </span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line"><span class="header">Frequent insert, update, delete                           Yes</span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line"><span class="header">Row locking (multi processing on single table)            Yes</span><br><span class="line">----------------------------------------------------------------</span></span><br><span class="line">Relational base design                                    Yes</span><br></pre></td></tr></table></figure></p>
<p>To summarize:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frequent reading, almost no writing   =&gt; MyISAM</span><br><span class="line">Full-text search <span class="keyword">in</span> MySQL &lt;= <span class="number">5.5</span>      =&gt; MyISAM</span><br></pre></td></tr></table></figure></p>
<p>In all other circumstances, InnoDB is usually the best way to go.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>InnoDB支持事务，MyISAM不支持事务<br>InnoDB支持行锁，MyISAM使用表锁<br>InnoDB支持外键，MyISAM不支持外键<br>InnoDB在1.2（MySQL5.6.4）之后才支持全文索引，MyISAM支持索引</p>
<p>Here is a ]]>
    </summary>
    
      <category term="MySQL" scheme="http://blog.noobsky.com/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://blog.noobsky.com/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM和Tomcat类加载机制]]></title>
    <link href="http://blog.noobsky.com/2016/08/20/JVM%E5%92%8CTomcat%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.noobsky.com/2016/08/20/JVM和Tomcat类加载机制/</id>
    <published>2016-08-20T02:45:39.000Z</published>
    <updated>2016-08-20T02:45:39.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[垃圾回收器和内存分配]]></title>
    <link href="http://blog.noobsky.com/2016/08/20/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>http://blog.noobsky.com/2016/08/20/垃圾回收器和内存分配/</id>
    <published>2016-08-20T01:37:43.000Z</published>
    <updated>2016-08-20T03:26:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="串行垃圾回收器">串行垃圾回收器</h2><p>特点：单线程、独占式垃圾回收。</p>
<h2 id="并行垃圾回收器">并行垃圾回收器</h2><p>多线程、独占</p>
<h2 id="CMS回收器">CMS回收器</h2><p>主要步骤：初始标记、并发标记、预清理、重新标记、并发清理、并发重置<br>初始标记和重新标记是独占的、而预清理、并发标记、并发清除、并发重置是可以和用户线程一起执行的</p>
<h2 id="G1回收器">G1回收器</h2><p>特点：<br>并行性：回收期间，多个GC线程同时工作<br>并发：可以与应用程序交替执行的能力，部分工作可以和应用程序同时执行<br>分代GC：<br>空间整理：</p>
<p>Collections.sort使用优化的归并排序，叫TimSort</p>
<p>类加载<br>加载：<br>验证：魔数验证、字节码验证<br>准备：为类变量分配内存并设置初始值<br>解析：符号引用替换为直接引用<br>初始化：初始化变量</p>
<p>JVM类加载器<br>BootStrapClassLoader引导类加载器<br>ExtClassLoader扩展类加载器<br>APPClassLoader应用类加载器<br>CustomClassLoader用户自定义类加载器</p>
<p>Tomcat类加载<br>Bootstrap引导类加载器<br>System系统类加载器<br>Common通用类加载器<br>webapp应用类加载器</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="串行垃圾回收器">串行垃圾回收器</h2><p>特点：单线程、独占式垃圾回收。</p>
<h2 id="并行垃圾回收器">并行垃圾回收器</h2><p>多线程、独占</p>
<h2 id="CMS回收器">CMS回收器</h2><p>主要步骤：初始标记、并发标记、]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java引用类型]]></title>
    <link href="http://blog.noobsky.com/2016/08/18/Java%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://blog.noobsky.com/2016/08/18/Java引用类型/</id>
    <published>2016-08-18T08:06:52.000Z</published>
    <updated>2016-08-19T02:09:25.000Z</updated>
    <content type="html"><![CDATA[<p>Java中有如下四种类型的引用：</p>
<ul>
<li>强引用(Strong Reference)</li>
<li>弱引用(WeakReference)</li>
<li>软引用(SoftReference)</li>
<li>虚引用(PhantomReference)<br>其中只有强引用FinalReference类是包内可见，其他3种引用类型均为public，可以在应用程序中直接使用。</li>
</ul>
<h2 id="强引用">强引用</h2><p>Java中的引用，有点像C++中的指针。通过引用，可以对堆中的对象进行操作。在函数中，当创建一个对象，该对象被分配在堆中，通过这个对象的引用才能对这个对象进行操作。如：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">StringBuffer</span> str = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>(<span class="string">"Hello Jaye"</span>);</span><br></pre></td></tr></table></figure></p>
<p>如果以上代码是在函数体内运行的，那么局部变量str将分配在栈上，而对象StringBuffer实例被分配在堆上。局部变量str指向StringBuffer实例所在堆空间，通过str可以操作该实例，那么str就是StringBuffer的引用。如果进行一次赋值<code>StringBuffer str1 = str</code>，那么，str所指向的对象也将被str1所指向，同时在局部栈空间上会分配空间存放str1变量。此时，该StringBuffer实例就有两个引用。以上中的两个引用，都是强引用，强引用具备以下特点：</p>
<ul>
<li>强引用可以直接访问目标对象</li>
<li>强引用所指向的对象在任何时候都不会被系统回收。JVM宁愿抛出OOM异常也不回收强引用所指向的对象。</li>
<li>强引用可能导致内存泄露。</li>
</ul>
<h2 id="软引用">软引用</h2><p>Java中的软引用使用java.lang.ref.SoftReference类来表示。一个持有软引用的对象，不会被JVM很快回收，JVM会根据当前堆的使用情况来判断何时回收。当堆的使用率临近阈值时，才会去回收软引用的对象。只要有足够的内存，软引用可能在内存中存活相当长的一段时间。因此，软引用可以用来实现缓存机制。</p>
<h2 id="弱引用">弱引用</h2><p>弱引用是一种比软引用较弱的引用类型。在系统GC时，只要发现弱引用，不管堆空间是否充足，都会将对象进行回收。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
<h2 id="虚引用">虚引用</h2><p>虚引用是所有引用类型中最弱的一个。一个持有虚引用的对象，和没有引用几乎是一样的，随时都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>
<h2 id="WeakHashMap及其实现">WeakHashMap及其实现</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>Java中有如下四种类型的引用：</p>
<ul>
<li>强引用(Strong Reference)</li>
<li>弱引用(WeakReference)</li>
<li>软引用(SoftReference)</li>
<li>虚引用(PhantomReference]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解ThreadLocal]]></title>
    <link href="http://blog.noobsky.com/2016/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ThreadLocal/"/>
    <id>http://blog.noobsky.com/2016/08/18/深入理解ThreadLocal/</id>
    <published>2016-08-18T00:26:09.000Z</published>
    <updated>2016-08-18T07:46:56.000Z</updated>
    <content type="html"><![CDATA[<p>ThreadLocal到底是干啥的，首先来看一下官方文档中的说明：<br>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).<br>大意是：<br>ThreadLocal类用来提供线程内的局部变量，这种变量每个线程只能访问（通过get或set方法访问）其自身拥有的，独立的初始化变量的拷贝。ThreadLocal实例通常都是<code>private static</code>类型的，用于关联线程的状态。</p>
<p>不知道这样翻译达意不，另附上网友的翻译：<br>ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问(通过get或set方法访问)时能保证各个线程里的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程的上下文。</p>
<p>其设计的初衷是为了解决多线程编程中的资源共享问题。大家熟悉的synchronized同步采取的是“以时间换空间”的策略，本质上是对共享资源上锁，让大家排队操作。而ThreadLocal采取的是“以空间换时间”的思路，为每个使用该变量的线程提供独立的变量副本（线程内部的的局部变量），可以保证本线程任何时间操纵的都是同一个对象。</p>
<h2 id="ThreadLocal的基本方法">ThreadLocal的基本方法</h2><h3 id="构造函数">构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a thread local variable.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是一个无参的构造函数，内部也没做任何初始化。</p>
<h3 id="initialValue">initialValue</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>该方法返回当前线程的线程本地变量（thread-local variable）的初始值。当线程第一次使用get()方法访问变量时会调用该方法。但是如果一开始就调用set()方法，则该方法不会被调用。通常该方法最多只会被每个线程调用一次，但是如果你调用remove()方法后又调用get()方法，那么initialValue()方法将再次被调用。该方法返回null值，如果你想返回null以外的值，则必须为ThreadLocal创建子类，并重写此方法提供初始值。通常使用匿名内部类的方式。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; sequence = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="get">get</h3><p>该方法用来获取与当前线程关联的ThreadLocal的值（返回当前线程的线程局部变量的副本拷贝的值）。如果这是线程第一次调用该方法，则创建并初始化(initialValue)此副本。方法原型：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public T <span class="function"><span class="title">get</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="set">set</h3><p>set函数用来设置当前线程的该ThreadLocal的值，通常子类不需要重写该方法，它们仅依赖于 initialValue() 方法来设置线程局部变量的值。方法原型如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">set</span>(T value)</span><br></pre></td></tr></table></figure></p>
<h3 id="remove">remove</h3><p>remove函数用来将当前线程的ThreadLocal绑定的值删除（移除当前线程中线程局部变量的值）。方法原型如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="function"><span class="title">remove</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="ThreadLocal的使用">ThreadLocal的使用</h2><p>下面演示ThreadLocal的使用。下面的例子是一个序列号生成器的程序，可能同时会有多个线程并发访问它，要保证每个线程得到的序列号都是自增的，而不能相互干扰。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ThreadLocalTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final ThreadLocal&lt;Integer&gt; sequence = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        @<span class="function">Override</span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> MySequence()).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> MySequence implements Runnable&#123;</span><br><span class="line">        @<span class="function">Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" =&gt; "</span> + sequence.get());</span><br><span class="line">                sequence.<span class="built_in">set</span>(sequence.get() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> =&gt; <span class="number">2</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">1</span> =&gt; <span class="number">2</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">0</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span> =&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到，各个线程的序列号都是相互独立的。也就是说，TheadLocal 为每一个线程提供了一个独立的副本！。</p>
<p>接下来写一个更有实际意义的例子，SimpleDateFormat不是线程安全的，详见本博文<a href="">SimpleDateFormat线程安全问题</a>，我们利用ThreadLocal来写一个线程安全的工具类对日期字符串进行解析和格式化输出。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DateFormat df = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == df)&#123;</span><br><span class="line">            df = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">            threadLocal.set(df);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ThreadLocal实现原理">ThreadLocal实现原理</h2><p>上次面试的时候面试官问我ThreadLocal是如何实现的？我说：<br>每个ThreadLocal类里有一个Map，然后用线程的ID作为Map的key，实例对象作为Map的value，这样就能达到各个线程的值隔离的效果。<br>然后面试官问我确定吗？额，我好虚……这是最简单的设计方案，JDK最早期的ThreadLocal就是这样设计的，但是现在已经不是这样了:(。</p>
<h3 id="get方法">get方法</h3><p>JDK7中get方法的源码：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T get() &#123;</span><br><span class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span><span class="built_in">.</span>currentThread();</span><br><span class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap<span class="built_in">.</span>Entry e = <span class="built_in">map</span><span class="built_in">.</span>getEntry(this);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="built_in">null</span>)</span><br><span class="line">                <span class="keyword">return</span> (T)e<span class="built_in">.</span>value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>JDK8中get方法的源码：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public T get() &#123;</span><br><span class="line">        <span class="type">Thread</span> t = <span class="type">Thread</span>.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != null) &#123;</span><br><span class="line">            <span class="type">ThreadLocalMap</span>.<span class="type">Entry</span> e = map.getEntry(this);</span><br><span class="line">            <span class="keyword">if</span> (e != null) &#123;</span><br><span class="line">                @<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T <span class="literal">result</span> = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>JDK7和JDK8中没啥变化，那就使用JDK8的源码来分析吧。首先通过getMap方法获取ThreadLocalMap，如果ThreadLocalMap为空则调用setInitialValue方法。<br>其中getMap方法源码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>setInitialValue方法的源码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        T <span class="keyword">value</span> = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="function"><span class="keyword">else</span></span><br><span class="line">            <span class="title">createMap</span>(<span class="params">t, <span class="keyword">value</span></span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>createMap方法的源码为：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">       t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>看了以上的源码之后，就会明白get方法的步骤如下：</p>
<ol>
<li>首先通过Thread.currentThread()获取当前线程</li>
<li>根据当前线程获得对应的Map</li>
<li>如果获得的Map不为空，（该Map的key为ThreadLocal当前对象）取出key为当前ThreadLocal对应的Entry对象返回，再从Entry中返回对应的value。</li>
<li>如果Map为空或者Entry为空则调用setInitialValue方法，setInitialValue方法中利用initialValue方法获得初始值value。如果Map为空则用当前ThreadLocal对象为firstKey，value为firstValue构建一个新的Map的。如果是Entry为空则将当前ThreadLocal对象对应Entry放入Map中。</li>
</ol>
<h3 id="set方法">set方法</h3><p>set方法源码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="params">T <span class="keyword">value</span></span>) </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="function"><span class="keyword">else</span></span><br><span class="line">            <span class="title">createMap</span>(<span class="params">t, <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>set方法类似，首先获得当前线程对象，然后通过getMap拿到线程的ThreadLocalMap，并将值设入ThreadLocalMap中。ThreadLocalMap可以理解为一个Map（其实不是，后面介绍），但是它是定义在Thread内部的成员。注意下面的定义是从Thread类中摘出来的：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* ThreadLocal values pertaining <span class="keyword">to</span> this thread. This map <span class="keyword">is</span> maintained</span><br><span class="line"> * <span class="keyword">by</span> <span class="keyword">the</span> ThreadLocal <span class="type">class</span>. */</span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure></p>
<p>经过上面的分析，我们可以总结一下ThreadL的设计原理：<br>每一个Thread维护一个ThreadLocalMap的映射表，该映射表的key为ThreadL对象，value就是真正存储的线程的局部变量。比如上面SimpleDateFormat的例子中value就是SimpleDateFormat。</p>
<h2 id="ThreadLocalMap">ThreadLocalMap</h2><p>先上ThreadLocalMap是ThreadLocal中的内部类，ThreadLocalMap的key是ThreadLocal的弱引用<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The entries in this hash map extend WeakReference, using</span><br><span class="line">     * its main ref field as the key (which is always a</span><br><span class="line">     * ThreadLocal object).  Note that null keys (i.e. entry.get()</span><br><span class="line">     * == null) mean that the key is no longer referenced, so the</span><br><span class="line">     * entry can be expunged from table.  Such entries are referred to</span><br><span class="line">     * as "stale entries" in the code that follows.</span><br><span class="line">     */</span></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">WeakReference&lt;ThreadLocal&gt;</span> &#123;</span></span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        <span class="type">Object</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="type">Entry</span>(<span class="type">ThreadLocal</span> k, <span class="type">Object</span> v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>弱引用是比强引用弱得多的引用。Java虚拟机在垃圾回收时，如果发现弱引用，就会立即回收。由上面的代码可知ThreadLocalMap内部由一系列Entry构成，每一个Entry都是WeakReference<threadlocal>。这里的参数k就是Map的key，v就是Map的value。其中k也就是ThreadLocal实例，作为弱引用使用（sunper(k)就是调用了WeakReference的构造函数）。因此，虽然这里使用ThreadLocal作为Map的key，但是实际上，它并不真的持有ThreadLocal的引用。而当ThreadLocal的外部引用被回收时，ThreadLocalMap中的key就会变成null。当系统进行ThreadLocalMap清理时，就会自然将这些垃圾数据回收。</threadlocal></p>
<h2 id="参考文献">参考文献</h2><p><a href="http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/" target="_blank" rel="external">解密ThreadLocal</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ThreadLocal到底是干啥的，首先来看一下官方文档中的说明：<br>This class provides thread-local variables. These variables differ from their normal counterparts in]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ jquery.form和jersey异步上传图片（SpringMVC）]]></title>
    <link href="http://blog.noobsky.com/2016/08/16/jquery-form%E5%92%8Cjersey%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%EF%BC%88SpringMVC%EF%BC%89/"/>
    <id>http://blog.noobsky.com/2016/08/16/jquery-form和jersey异步上传图片（SpringMVC）/</id>
    <published>2016-08-16T12:23:03.000Z</published>
    <updated>2016-08-16T12:51:11.000Z</updated>
    <content type="html"><![CDATA[<p>在做一个商城项目时，使用图片服务器来为系统负载均衡,减轻系统压力,并使用Jquery.form和Jersey异步上传图片到图片服务器。</p>
<p>SpringMVC上传图片需要配置applicationContext.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- 上传图片转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"multipartResolver"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>  </span><br><span class="line">       <span class="comment">&lt;!-- 设置上传文件的最大尺寸为1MB --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxUploadSize"</span> <span class="attribute">value</span>=<span class="value">"1048576"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>页面表单为：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"/res/common/js/jquery.form.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="comment">//采用jquery.form.js异步上传图片,并结合&lt;form&gt;表单</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">uploadFic</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">var</span> options = &#123;</span><br><span class="line">			<span class="comment">//请求路径</span></span><br><span class="line">			url = <span class="string">"/upload/uploadPic.do"</span>,</span><br><span class="line">			dataType = <span class="string">"json"</span>,</span><br><span class="line">			type = <span class="string">"post"</span>,</span><br><span class="line">			beforeSubmit : <span class="function"><span class="keyword">function</span><span class="params">(formData,jqForm,options)</span></span>&#123;</span><br><span class="line">				<span class="comment">//判断是否为图片</span></span><br><span class="line">				<span class="keyword">var</span> f = jqForm[<span class="number">0</span>];<span class="comment">//将jqForm转成DOM对象</span></span><br><span class="line">				<span class="keyword">var</span> v = f.logoPic.value;<span class="comment">//获取DOM对象中name为logoPic的值</span></span><br><span class="line">				<span class="comment">//获取扩展名,并转成小写</span></span><br><span class="line">				<span class="keyword">var</span> ext = v.substring(v.length-<span class="number">3</span>).toLowerCase();</span><br><span class="line">				<span class="comment">//比对扩展名 jpg gif bmp png</span></span><br><span class="line">				<span class="keyword">if</span>(ext != <span class="string">"jpg"</span> &amp;&amp; ext != <span class="string">"gif"</span> &amp;&amp; ext != <span class="string">"bmp"</span> &amp;&amp; ext != <span class="string">"png"</span>)&#123;</span><br><span class="line">					alert(<span class="string">"只允许上传图片!"</span>);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//校验提交的表单</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;,</span><br><span class="line">			success : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span><br><span class="line">				<span class="comment">//处理结果</span></span><br><span class="line">				<span class="comment">//将相对路径设置给隐藏域中,提交时用</span></span><br><span class="line">				$(<span class="string">"#imgUrl"</span>).val(data.path);</span><br><span class="line">				<span class="comment">//将全路径设置给img标签,显示图片用</span></span><br><span class="line">				<span class="preprocessor">#("#allImgUrl).attr("src",data.url);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		$(<span class="string">"#jvForm"</span>).ajaxSubmit(options);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;form id=<span class="string">"jvForm"</span> action=<span class="string">"add.do"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">……</span><br><span class="line">	&lt;img src=<span class="string">""</span> id=<span class="string">"allImgUrl"</span>/&gt;</span><br><span class="line">	&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"imgUrl"</span> id=<span class="string">"imgUrl"</span>/&gt;</span><br><span class="line">	&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadPic"</span> onchange=<span class="string">"uploadPic()"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>
<p>对应的UploadController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.common.web.ResponseUtils;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.core.web.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.Client;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.ClientHandlerException;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.UniformInterfaceException;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.WebResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 上传图片 商品 品牌 商品介绍Fck</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> lx</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">	<span class="comment">//上传图片</span></span><br><span class="line">	<span class="annotation">@RequestMapping</span>(value = <span class="string">"/upload/uploadPic.do"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadPic</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>)</span> MultipartFile pic, HttpServletResponse response) </span>&#123;</span><br><span class="line">		<span class="comment">// 扩展名</span></span><br><span class="line">		String ext = FilenameUtils.getExtension(pic.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 图片名称生成策略</span></span><br><span class="line">		DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmssSSS"</span>);</span><br><span class="line">		<span class="comment">// 图片名称的另一部分,加上随机的三位数</span></span><br><span class="line">		String format = df.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">			format += r.nextInt(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 实例化一个Jersey</span></span><br><span class="line">		Client client = <span class="keyword">new</span> Client();</span><br><span class="line">		<span class="comment">// 保存数据库</span></span><br><span class="line">		String path = <span class="string">"upload/"</span> + format + <span class="string">"."</span> + ext;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 图片服务器地址</span></span><br><span class="line">		String url = Constants.IMAGE_URL + path;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置请求路径</span></span><br><span class="line">		WebResource resource = client.resource(url);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			resource.put(String.class, pic.getBytes());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回两个路径</span></span><br><span class="line">		JSONObject jo = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		jo.put(<span class="string">"url"</span>, url);</span><br><span class="line">		jo.put(<span class="string">"path"</span>, path);</span><br><span class="line"></span><br><span class="line">		ResponseUtils.renderJson(response, jo.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ResponseUtils的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 异步返回各种格式</span><br><span class="line"> * json</span><br><span class="line"> * xml</span><br><span class="line"> * text</span><br><span class="line"> * <span class="doctag">@author</span> lx</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//发送内容  </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(HttpServletResponse response,String contentType,String text)</span></span>&#123;</span><br><span class="line">		response.setContentType(contentType);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			response.getWriter().write(text);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送的是JSON</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderJson</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"application/json;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送xml</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderXml</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"text/xml;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送text</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renderText</span><span class="params">(HttpServletResponse response,String text)</span></span>&#123;</span><br><span class="line">		render(response, <span class="string">"text/plain;charset=UTF-8"</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要两台服务器，即两个Tomcat，一个是项目本身所在的服务器，假设8080，那么需要添加另外一台服务器作为图片存储所在的服务器，假设8888，在图片存储的服务器Tomcat(8888)中conf/web.xml中修改如下配置，也就是添加readonly=false，服务器内容默认只读，现在改成false，这样图片就能上传到这个服务器。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-<span class="built_in">name</span>&gt;<span class="keyword">default</span>&lt;/servlet-<span class="built_in">name</span>&gt;        &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;debug&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="number">0</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">		   &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;readonly&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="literal">false</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">        &lt;init-<span class="built_in">param</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;listings&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">param</span>-value&gt;<span class="literal">false</span>&lt;/<span class="built_in">param</span>-value&gt;</span><br><span class="line">        &lt;/init-<span class="built_in">param</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">load</span>-on-startup&gt;<span class="number">1</span>&lt;/<span class="built_in">load</span>-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p>
<p>开始时遇到错误：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com<span class="class">.sun</span><span class="class">.jersey</span><span class="class">.api</span><span class="class">.client</span><span class="class">.UniformInterfaceException</span>:</span><br><span class="line">PUT http:<span class="comment">//localhost:8888/image-web/upload/20160515104302348740.jpg returned a response status of 409 Conflict</span></span><br></pre></td></tr></table></figure></p>
<p>解决方案：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、确保image-web项目已经成功部署到<span class="number">8888</span>服务器</span><br><span class="line"><span class="number">2</span>、确保<span class="number">8888</span>服务器成功启动</span><br><span class="line"><span class="number">3</span>、确保服务器webapps中image-web项目中存在upload路径</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做一个商城项目时，使用图片服务器来为系统负载均衡,减轻系统压力,并使用Jquery.form和Jersey异步上传图片到图片服务器。</p>
<p>SpringMVC上传图片需要配置applicationContext.xml:<br><figure class="hig]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SimpleDateFormat线程安全问题]]></title>
    <link href="http://blog.noobsky.com/2016/08/16/SimpleDateFormat%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.noobsky.com/2016/08/16/SimpleDateFormat线程安全问题/</id>
    <published>2016-08-16T10:46:07.000Z</published>
    <updated>2016-08-16T12:17:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>SimpleDateFormat是Java中一个非常常用的类，该类用来对日期字符串进行解析和格式化输出，但是SimpleDateFormat类不是线程安全的，在多线程环境下调用format和parse方法应该使用同步代码或者使用ThreadLocal来避免线程安全问题。首先我们写一个日期工具类DateUtil来对日期字符串进行解析和格式化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在多线程环境下进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatThreadSafeTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + DateUtil.parse(<span class="string">"2016-08-16 19:31:30"</span>));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SimpleDateFormatThreadSafeTest()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java<span class="class">.lang</span><span class="class">.NumberFormatException</span>: multiple points</span><br><span class="line">	at sun<span class="class">.misc</span><span class="class">.FloatingDecimal</span><span class="class">.readJavaFormatString</span>(FloatingDecimal<span class="class">.java</span>:<span class="number">1110</span>)</span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Double</span><span class="class">.parseDouble</span>(Double<span class="class">.java</span>:<span class="number">540</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DigitList</span><span class="class">.getDouble</span>(DigitList<span class="class">.java</span>:<span class="number">168</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DecimalFormat</span><span class="class">.parse</span>(DecimalFormat<span class="class">.java</span>:<span class="number">1321</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.subParse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1793</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.parse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1455</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DateFormat</span><span class="class">.parse</span>(DateFormat<span class="class">.java</span>:<span class="number">355</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtil</span><span class="class">.parse</span>(DateUtil<span class="class">.java</span>:<span class="number">18</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtilTest</span><span class="variable">$SimpleDateFormatThreadSafeTest</span>.<span class="function"><span class="title">run</span><span class="params">(DateUtilTest.java:<span class="number">19</span>)</span></span></span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Thread</span><span class="class">.run</span>(Thread<span class="class">.java</span>:<span class="number">745</span>)</span><br><span class="line">java<span class="class">.lang</span><span class="class">.NumberFormatException</span>: multiple points</span><br><span class="line">	at sun<span class="class">.misc</span><span class="class">.FloatingDecimal</span><span class="class">.readJavaFormatString</span>(FloatingDecimal<span class="class">.java</span>:<span class="number">1110</span>)</span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Double</span><span class="class">.parseDouble</span>(Double<span class="class">.java</span>:<span class="number">540</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DigitList</span><span class="class">.getDouble</span>(DigitList<span class="class">.java</span>:<span class="number">168</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DecimalFormat</span><span class="class">.parse</span>(DecimalFormat<span class="class">.java</span>:<span class="number">1321</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.subParse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1793</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.SimpleDateFormat</span><span class="class">.parse</span>(SimpleDateFormat<span class="class">.java</span>:<span class="number">1455</span>)</span><br><span class="line">	at java<span class="class">.text</span><span class="class">.DateFormat</span><span class="class">.parse</span>(DateFormat<span class="class">.java</span>:<span class="number">355</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtil</span><span class="class">.parse</span>(DateUtil<span class="class">.java</span>:<span class="number">18</span>)</span><br><span class="line">	at com<span class="class">.jaye</span><span class="class">.dateformat</span><span class="class">.DateUtilTest</span><span class="variable">$SimpleDateFormatThreadSafeTest</span>.<span class="function"><span class="title">run</span><span class="params">(DateUtilTest.java:<span class="number">19</span>)</span></span></span><br><span class="line">	at java<span class="class">.lang</span><span class="class">.Thread</span><span class="class">.run</span>(Thread<span class="class">.java</span>:<span class="number">745</span>)</span><br><span class="line">Thread-<span class="number">2</span>:Sat Aug <span class="number">16</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">30</span> CST <span class="number">2200</span></span><br><span class="line">Thread-<span class="number">0</span>:Tue Aug <span class="number">16</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">30</span> CST <span class="number">2016</span></span><br></pre></td></tr></table></figure></p>
<p>有些线程发生java.lang.NumberFormatException: multiple points错误，有些虽然没有错误但是离谱的是穿越了：Thread-2:Sat Aug 16 19:31:30 CST 2200</p>
<h2 id="原因">原因</h2><p>我们不要以为SimpleDateFormat实例变量已经用final修饰了就是状态不变线程安全的。在JDK的官方文档中有提到：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date formats are <span class="operator">not</span> synchronized. It is recommended <span class="built_in">to</span> <span class="built_in">create</span> separate <span class="built_in">format</span> instances <span class="keyword">for</span> <span class="keyword">each</span> thread. If multiple threads access <span class="operator">a</span> <span class="built_in">format</span> concurrently, <span class="keyword">it</span> must be synchronized externally.</span><br></pre></td></tr></table></figure></p>
<p>SimpleDateFormat中日期格式不是同步的。建议为每个线程都分别创建format实例变量。如果多个线程共享一个format实例的话，则必须保证外部同步的。SimpleDateFormat继承了DateFormat,在DateFormat中定义了一个protected属性的 Calendar类的对象：calendar。该成员变量是多线程共享的，会在多线程的时候出现错误。</p>
<h2 id="解决方案">解决方案</h2><h3 id="需要的时候创建新实例">需要的时候创建新实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次需要用到SimpleDateFormat 的时候新new一个实例，不管什么时候，将有线程安全问题的对象由共享变为局部私有都能避免多线程问题，不过也加重了创建对象的负担。在一般情况下，这样其实对性能影响不是很明显的。</p>
<h3 id="使用同步">使用同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法在当线程较多时，当一个线程获得锁调用该方法时，其他想要调用此方法的线程就要阻塞，多线程并发量大的时候会对性能有一定的影响。</p>
<h3 id="使用ThreadLocal">使用ThreadLocal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jaye.dateformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 16/8/16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DateFormat df = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == df)&#123;</span><br><span class="line">            df = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">            threadLocal.set(df);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat().parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p>
<h2 id="参考文献">参考文献</h2><p><a href="http://zclau.com/2016/03/22/Java-SimpleDateFormat%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/" target="_blank" rel="external">Java SimpleDateFormat的线程安全性问题</a><br><a href="http://www.cnblogs.com/peida/archive/2013/05/31/3070790.html" target="_blank" rel="external">深入理解Java：SimpleDateFormat安全的时间格式化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><p>SimpleDateFormat是Java中一个非常常用的类，该类用来对日期字符串进行解析和格式化输出，但是SimpleDateFormat类不是线程安全的，在多线程环境下调用format和parse方法应该使用同步代码或者使用Thre]]>
    </summary>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="线程安全" scheme="http://blog.noobsky.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Excel-Sheet-Column-Number-Title/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Excel-Sheet-Column-Number-Title/</id>
    <published>2016-07-18T15:20:11.000Z</published>
    <updated>2016-07-18T15:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Excel Sheet Column Number/Title’<br>date: 2016-07-18 23:09:19<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Math<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="Excel_Sheet_Column_Title">Excel Sheet Column Title</h2><h3 id="题目描述">题目描述</h3><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="subst">-&gt; </span>A</span><br><span class="line"><span class="number">2</span> <span class="subst">-&gt; </span>B</span><br><span class="line"><span class="number">3</span> <span class="subst">-&gt; </span>C</span><br><span class="line"><span class="attribute">...</span></span><br><span class="line"><span class="number">26</span> <span class="subst">-&gt; </span>Z</span><br><span class="line"><span class="number">27</span> <span class="subst">-&gt; </span>AA</span><br><span class="line"><span class="number">28</span> <span class="subst">-&gt; </span>AB</span><br></pre></td></tr></table></figure></p>
<h3 id="代码">代码</h3><p>其实就是26进制转换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n--;</span><br><span class="line">            sb.append((<span class="keyword">char</span>)(<span class="string">'A'</span> + n % <span class="number">26</span>));</span><br><span class="line">            n = n / <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不在最后反转就用前插函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           n--;</span><br><span class="line">           result.insert(<span class="number">0</span>, (<span class="keyword">char</span>)(<span class="string">'A'</span> + n % <span class="number">26</span>));</span><br><span class="line">           n /= <span class="number">26</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result.toString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Excel_Sheet_Column_Number">Excel Sheet Column Number</h2><h3 id="题目描述-1">题目描述</h3><p>Related to question Excel Sheet Column Title</p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A <span class="subst">-&gt; </span><span class="number">1</span></span><br><span class="line">B <span class="subst">-&gt; </span><span class="number">2</span></span><br><span class="line">C <span class="subst">-&gt; </span><span class="number">3</span></span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">Z <span class="subst">-&gt; </span><span class="number">26</span></span><br><span class="line">AA <span class="subst">-&gt; </span><span class="number">27</span></span><br><span class="line">AB <span class="subst">-&gt; </span><span class="number">28</span></span><br></pre></td></tr></table></figure></p>
<h3 id="代码-1">代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if(s == null || s.length() == 0) return 0;</span></span><br><span class="line">        <span class="comment">// int sum = 0;</span></span><br><span class="line">        <span class="comment">// s = s.toUpperCase();</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; s.length(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     int digit = s.charAt(i) - 'A' + 1;</span></span><br><span class="line">        <span class="comment">//     sum = sum + digit*(int)Math.pow(26,s.length()-(i+1));</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return sum;</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            sum = sum * <span class="number">26</span> + (s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Excel Sheet Column Number/Title’<br>date: 2016-07-18 23:09:19<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Math<br>c]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Valid-Anagram/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Valid-Anagram/</id>
    <published>2016-07-18T11:06:27.000Z</published>
    <updated>2016-07-18T11:06:27.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Valid Anagram’<br>date: 2016-07-18 18:15:37<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Hash Table</li>
<li>Sort<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<p>Follow up:<br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<h2 id="代码">代码</h2><p>直接字符串排序，然后判断是否相等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意先判空，不然后面可能会空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == s) <span class="keyword">return</span> <span class="keyword">null</span> == t;</span><br><span class="line">        <span class="keyword">return</span> sort(s).equals(sort(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sort</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] content = s.toCharArray();</span><br><span class="line">        Arrays.sort(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断两个字符出现的字符和次数是否相等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length() ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] alphas = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) alphas[s.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.length(); j++) alphas[t.charAt(j) - <span class="string">'a'</span>]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> alpha:alphas) <span class="keyword">if</span>(alpha != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Valid Anagram’<br>date: 2016-07-18 18:15:37<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Hash Table</li>
<li>Sort<br]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Same-Tree/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Same-Tree/</id>
    <published>2016-07-18T10:12:54.000Z</published>
    <updated>2016-07-18T10:12:54.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Same Tree’<br>date: 2016-07-18 18:09:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Tree</li>
<li>DFS<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//都为空返回true</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//if((p == null &amp;&amp; q != null) || (p != null &amp;&amp; q == null)) return false;</span></span><br><span class="line">        <span class="comment">//只有一个为null，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span> ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//递归调用   </span></span><br><span class="line">        <span class="keyword">return</span> p.val==q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Same Tree’<br>date: 2016-07-18 18:09:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Tree</li>
<li>DFS<br>categories]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.noobsky.com/2016/07/18/LeetCode-Delete-Node-in-a-Linked-List/"/>
    <id>http://blog.noobsky.com/2016/07/18/LeetCode-Delete-Node-in-a-Linked-List/</id>
    <published>2016-07-18T10:05:20.000Z</published>
    <updated>2016-07-18T10:05:20.000Z</updated>
    <content type="html"><![CDATA[<p>title: ‘[LeetCode]Delete Node in a Linked List’<br>date: 2016-07-18 17:58:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Linked List<br>categories:</li>
<li>Leetcode</li>
</ul>
<h2 id="题目描述">题目描述</h2><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将当前需要删除的节点修改为下一个节点的值，并删除下一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: ‘[LeetCode]Delete Node in a Linked List’<br>date: 2016-07-18 17:58:48<br>tags:</p>
<ul>
<li>Java</li>
<li>算法</li>
<li>Linked List<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Move Zeroes]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Move-Zeroes/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Move-Zeroes/</id>
    <published>2016-07-17T08:34:57.000Z</published>
    <updated>2016-07-17T08:44:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Given an array nums, write a function to move all 0’s to the end of it while <font color="red">maintaining the relative order of the non-zero elements</font>.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:</p>
<pre><code><span class="number">1.</span> You must <span class="built_in">do</span> this <span class="operator">in</span>-place <span class="keyword">without</span> making <span class="operator">a</span> copy <span class="operator">of</span> <span class="operator">the</span> array.
<span class="number">2.</span> Minimize <span class="operator">the</span> total <span class="built_in">number</span> <span class="operator">of</span> operations.
</code></pre><h2 id="代码">代码</h2><p>题目要求我们要维护非零元素的原始相对顺序。我们只需要遍历数组，当遇到非零元素时，跟前面的元素交换，比如遇到第一个非零元素，我们交换到index = 0的位置，第二个非零元素交换到index = 1的位置。这样我们在保持原始不为零元素的相对顺序的时候将所有的零放到数组的后面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">int</span> temp = nums[current];</span><br><span class="line">              nums[current++] = nums[i];</span><br><span class="line">              nums[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实我们大可不必交换，遇到非零元素就按原来相对顺序放到数组前面部分，然后在后面补上零就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> insertPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>) nums[insertPos++] = num;</span><br><span class="line">    &#125;        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (insertPos &lt; nums.length) &#123;</span><br><span class="line">        nums[insertPos++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Given an array nums, write a function to move all 0’s to the end of it while <font color="red">maintaining the rel]]>
    </summary>
    
      <category term="Array" scheme="http://blog.noobsky.com/tags/Array/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Two Pointers" scheme="http://blog.noobsky.com/tags/Two-Pointers/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[LeetCode]Invert Binary Tree]]></title>
    <link href="http://blog.noobsky.com/2016/07/17/LeetCode-Invert-Binary-Tree/"/>
    <id>http://blog.noobsky.com/2016/07/17/LeetCode-Invert-Binary-Tree/</id>
    <published>2016-07-17T08:16:10.000Z</published>
    <updated>2016-07-17T08:23:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>Invert a binary tree.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">7</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span> <span class="number">6</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<p>to<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">7</span>     <span class="number">2</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">9</span>   <span class="number">6</span> <span class="number">3</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>Trivia:<br>This problem was inspired by this original tweet by Max Howell:<br>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>
<h2 id="代码">代码</h2><p>使用DFS的方法。如果当前节点为null，直接返回null。否则递归反转当前节点左子树和右子树。最后交换当前节点的左子树和右子树。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     TreeNode right = invertTree(root.right);</span><br><span class="line">     TreeNode left = invertTree(root.left);</span><br><span class="line">     root.right = left;</span><br><span class="line">     root.left = right;</span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用BFS的方法。当从队列中取出一个节点时，先交换该节点左右子节点，然后再讲交换后的左右子节点加入队列中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="comment">//BFS</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          TreeNode current = queue.poll();</span><br><span class="line">          TreeNode temp = current.left;</span><br><span class="line">          current.left = current.right;</span><br><span class="line">          current.right = temp;</span><br><span class="line">          <span class="keyword">if</span>(current.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">              queue.offer(current.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(current.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">              queue.offer(current.right);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目描述">题目描述</h2><p>Invert a binary tree.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</sp]]>
    </summary>
    
      <category term="BFS" scheme="http://blog.noobsky.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://blog.noobsky.com/tags/DFS/"/>
    
      <category term="Java" scheme="http://blog.noobsky.com/tags/Java/"/>
    
      <category term="Tree" scheme="http://blog.noobsky.com/tags/Tree/"/>
    
      <category term="算法" scheme="http://blog.noobsky.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://blog.noobsky.com/categories/Leetcode/"/>
    
  </entry>
  
</feed>
