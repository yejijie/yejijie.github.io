<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[NoobSky]]></title>
  <subtitle><![CDATA[废话少说，放码过来 - http://blog.noobsky.com]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.noobsky.com/"/>
  <updated>2015-11-28T12:40:40.000Z</updated>
  <id>http://blog.noobsky.com/</id>
  
  <author>
    <name><![CDATA[Jaye]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[利用AWS搭建Shadowsocks服务器]]></title>
    <link href="http://blog.noobsky.com/2015/11/27/%E5%88%A9%E7%94%A8AWS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.noobsky.com/2015/11/27/利用AWS搭建Shadowsocks服务器/</id>
    <published>2015-11-27T02:43:00.000Z</published>
    <updated>2015-11-28T12:40:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="aws和vps">aws和vps</h2><p>aws是亚马逊网络服务系统（英语：Amazon Web Services，简称为AWS），由亚马逊公司所创建的云计算平台，提供许多远程Web服务。Amazon EC2与Amazon S3都架构在这个平台上。在2002年7月首次公开运作，提供其他网站及客户端（client-side）的服务。aws的详细介绍见维基百科<a href="https://en.wikipedia.org/wiki/Amazon_Web_Services" target="_blank" rel="external">Amazon Web Services</a>。本文选择AWS的<em>EC2</em>搭建shadowsocks服务器。EC2详见<a href="https://en.wikipedia.org/wiki/Amazon_Elastic_Compute_Cloud" target="_blank" rel="external">Amazon Elastic Compute Cloud</a>。当然也可以用其他的vps搭建shadowsocks服务器。比如linode、digitalocean、<em>墙外</em>阿里云（比如美国节点）。vps是<br>虚拟专用服务器（英语：Virtual private server，缩写为 VPS），是指通过虚拟化技术在独立服务器中运行的专用服务器。每个使用VPS技术的虚拟独立服务器拥有各自独立的公网IP地址、操作系统、硬盘空间、内存空间、CPU资源等，还可以进行安装程序、重启服务器等操作，与运行一台独立服务器完全相同。更多介绍见维基百科<a href="https://en.wikipedia.org/wiki/Virtual_private_server" target="_blank" rel="external">Virtual private server</a><br>注：本文不对vps和云主机（云服务器）进行区分，两种类似。本文都称为vps。<br>为啥选择aws？aws可以免费提供一年的云服务，1G内存、1核，搭建shadowsocks服务器再跑个web足够了。需要注意的是aws注册时需要信用卡账号，如果你是学生党没有信用卡，可以到某宝上买个虚拟信用卡（只要10块钱左右）。还有就是aws应该选择日本或者新加坡节点，时延小，速度会快很多。阿里云的<em>国内节点</em>虽然有速度优势和价格优势（推出学生机，一个月9块钱），但其翻不了墙；阿里云还有一个蛋疼的地方就是绑定域名的话需要进行<em>备案</em>。linode和digitalocean口碑好像不错，博主没有用过，因为博主没钱，linode最便宜的是10刀一个月，digitalocean最低价是5刀每个月，不知是否有其他优惠，详情到官网去看吧，不差钱的主可以选择。</p>
<h2 id="shadowsocks">shadowsocks</h2><p>再说一遍，程序员三大必备网站是：Google、Github、StackOverflow。如果你还在用Baidu搜索技术文章的话，我想说的是，少年你已经被鄙视很多年了，赶紧换成谷歌吧，不要再被鄙视了！Github、StackOverflow在国内能够正常访问，但是Google由于众所周知的原因，国内无法访问，所以我们需要翻墙访问Google。个人觉得shadowsocks的是目前最好用的代理，没有之一！shadowsocks有多牛？首先Github上shadowsocks开源代码一万多star，前段时间shadowsocks的作者被约谈了，还被要求删除在Github上的源码，你说有多牛！还有市场上卖shadowsocks代理的多的是，一方面shadowsocks是开源的，谁都可以在vps上搭建shadowsocks服务器；另一方面shadowsocks的速度真的很快（前提是vps不能太烂）。<br>shadowsocks有如下特点：</p>
<ul>
<li><p>快速（异步I/O和事件驱动程序，类似Nodejs）</p>
</li>
<li><p>安全（所有的流量都经过加密算法加密，支持自定义算法）</p>
</li>
<li><p>支持移动客户端（专为移动设备和无线网络优化）</p>
</li>
<li><p>跨平台（全平台，包括Mac、Linux、Windows、Android、iOS和路由器（OpenWrt）都支持）</p>
</li>
<li><p>稳定、速度快</p>
</li>
<li><p>开源、易于维护<br>听完上面的介绍，你心动了吗？心动不如行动，让我们马上开始！</p>
</li>
</ul>
<h2 id="安装shadowsocks">安装shadowsocks</h2><p>首先注册AWS，创建EC2服务器（自己谷歌相关教程吧，或者以后博主再写相关文章），并开放相关TCP端口，详细设置请见EC2<a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/concepts.html" target="_blank" rel="external">用户指南</a>，官方文档非常详细还是中文版的！<br>我创建EC2服务器时选择的是亚马逊的自己的系统Amazon Linux AMI（其实是经过定制的Centos），请记住自己是什么系统，因为安装命令稍微不同。如果忘记是什么系统，请使用命令查看：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">30</span>-<span class="number">45</span> ~]$ cat /etc/system-release</span><br><span class="line">Amazon Linux AMI release <span class="number">2015.09</span></span><br></pre></td></tr></table></figure></p>
<p>安装命令如下：<br>CentOS：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> python-setuptools </span><br><span class="line">easy_install pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure></p>
<p>Debian / Ubuntu:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure></p>
<p>提示没有权限时，请在命令前面加上sudo(在这三条命令前都要加sudo)，或者切换到root用户（后面讲），如下：<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/shadowsocks-2015-11-27-18.19.54.png" alt=""><br>安装完毕后，用ssserver -h命令查看是否安装成功并查看相关用法：<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/shadowsocks-2015-11-27-18.26.12.png" alt=""><br>提示找不到ssserver命令时（没遇到此问题），请用which或whereis命令查看所在目录<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/shadowsocks-2015-11-27-18.24.57.png" alt=""><br>然后把/usr/local/bin加入到/etc/profile文件中即可。</p>
<h2 id="shadowsocks的使用">shadowsocks的使用</h2><ul>
<li><p>运行</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -p <span class="number">8388</span> -k password -m aes-<span class="number">256</span>-cfb</span><br></pre></td></tr></table></figure>
</li>
<li><p>后台运行</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p <span class="number">8388</span> -k password -m aes-<span class="number">256</span>-cfb --<span class="keyword">user</span> <span class="title">nobody</span> -d <span class="literal">start</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver <span class="operator">-d</span> stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看log</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo less /<span class="built_in">var</span>/<span class="keyword">log</span>/shadowsocks<span class="built_in">.</span><span class="keyword">log</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>推荐使用以下的配置文件方式：<br>使用<code>sudu vim /etc/shadowsocks.json</code>命令创建<code>/etc/shadowsocks.json</code>文件(不是root用户请加入sudo)，比如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"0.0.0.0"</span></span>,</span><br><span class="line">    "<span class="attribute">server_port</span>":<span class="value"><span class="number">8388</span></span>,</span><br><span class="line">    "<span class="attribute">local_address</span>": <span class="value"><span class="string">"127.0.0.1"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">password</span>":<span class="value"><span class="string">"mypassword"</span></span>,</span><br><span class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">300</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">fast_open</span>": <span class="value"><span class="literal">false</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>各个字段代表的含义如下：</p>
<ul>
<li>server: 服务器监听地址</li>
<li>server_port: 服务器端口</li>
<li>local_address: 本地监听地址</li>
<li>local_port: 本地端口</li>
<li>password: 密码</li>
<li>timeout: 超时时间</li>
<li>method: 加密算法</li>
<li>fast_open: 使用TCP_FASTOPEN，true/false</li>
<li>workers: 工作线程数，Unix/Linux可用</li>
</ul>
<p>配置文件写好之后就可以运行shadowsocks了：</p>
<ul>
<li><p>运行</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>后台运行</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行：sudo ssserver -c /etc/shadowsocks.json -d <span class="operator"><span class="keyword">start</span></span><br><span class="line">停止：sudo ssserver -<span class="keyword">c</span> /etc/shadowsocks.<span class="keyword">json</span> -<span class="keyword">d</span> <span class="keyword">stop</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这里遇到的问题是，运行命令<code>sudo ssserver -c /etc/shadowsocks.json -d start</code>提示找不到<code>ssserver</code>命令，如下图，此时可以使用ssserver命令的绝对路径或者切换到root用户。<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/shadowsocks-2015-11-27-19.15.34.png" alt=""><br>切换到root用户：<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/shadowsocks-2015-11-27-19.22.49.png" alt=""><br>输入命令<code>sudo passwd root</code>,输入两遍新密码，然后输入命令<code>su root</code>，输入刚才设置的密码即切换为root用户，<br>然后重新执行命令<code>ssserver -c /etc/shadowsocks.json -d start</code>即可。</p>
<p>现在shadowsocks服务器已经成功运行，我们使用shadowsocks客户端连接刚刚搭建的服务器就可以科学上网啦。<br>shadowsocks客户端下载地址<a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/2.5.8/Shadowsocks-2.5.8.zip" target="_blank" rel="external">Windows</a>、<a href="https://github.com/shadowsocks/shadowsocks-iOS/releases/download/2.6.3/ShadowsocksX-2.6.3.dmg" target="_blank" rel="external">Mac</a>。客户端配置要是搞不定就提问、或者自行谷歌解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="aws和vps">aws和vps</h2><p>aws是亚马逊网络服务系统（英语：Amazon Web Services，简称为AWS），由亚马逊公司所创建的云计算平台，提供许多远程Web服务。Amazon EC2与Amazon S3都架构在这个平台上。在2002]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学术应用使用node-http-proxy集成谷歌学术]]></title>
    <link href="http://blog.noobsky.com/2015/11/25/%E5%AD%A6%E6%9C%AF%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8node-http-proxy%E9%9B%86%E6%88%90%E8%B0%B7%E6%AD%8C%E5%AD%A6%E6%9C%AF/"/>
    <id>http://blog.noobsky.com/2015/11/25/学术应用使用node-http-proxy集成谷歌学术/</id>
    <published>2015-11-25T01:00:31.000Z</published>
    <updated>2015-11-26T07:56:29.000Z</updated>
    <content type="html"><![CDATA[<p>搞科研的同学肯定离不开谷歌学术，谷歌学术搜索是文献搜索下载一大利器。之前实验室开发了一款学术应用，遗留了历史问题，就是没有解决文献搜索的功能，而这个任务最后落在我的身上。我采用的方案就是集成谷歌学术，但是国内的网络环境，你懂的，自然状态下根本就访问不了谷歌学术的，你得翻墙才能访问。你不能期望使用你开发的学术应用都能翻墙访问谷歌学术（虽然搞科研的人电脑翻墙软件肯定都准备好了！），所以呢我还要给谷歌学术搭建一个代理。不仅要集成谷歌学术一键搜索并下载，还要能导入和分享文献到自己开发的应用，获取文献的BIBTEX并导入到自己的学术应用中，就是要在代理中hack谷歌学术的原始响应，注入相关脚本。（关于BIBTEX可以去维基百科脑补一下。）<br>废话少说，放效果图过来先：（补图）<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-15.53.32.png" alt=""><br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-12.37.34.png" alt=""></p>
<h2 id="谷歌学术代理">谷歌学术代理</h2><p>谷歌学术代理默认采用的是node-http-proxy模块实现的，node-http-proxy的使用见博客<a href="http://blog.noobsky.com/2015/11/24/用node-http-proxy搭建谷歌代理/">用node-http-proxy搭建谷歌代理</a>和<a href="https://github.com/nodejitsu/node-http-proxy" target="_blank" rel="external">node-http-proxy的Github地址</a>。有人读到这已经急，Talk is cheap, Show me the code! 好好，博主这就废话少说，放码过来。新鲜热乎的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Jaye on 15/7/11.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">'./cookie'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> modifyHtml = <span class="built_in">require</span>(<span class="string">'./modify_html'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> PROXY_PORT = config.proxyPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy, server;</span><br><span class="line"><span class="keyword">var</span> cookieArr = [];</span><br><span class="line"><span class="keyword">var</span> hl = <span class="string">'zh-CN'</span>;</span><br><span class="line"><span class="keyword">var</span> injected = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理服务器</span></span><br><span class="line">proxy = httpProxy.createProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理error</span></span><br><span class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err,req,res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'Something went wrong. And we are reporting a custom error message.'</span> + err.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//载入需要注入的内容</span></span><br><span class="line">    injected = fs.readFileSync(<span class="string">'./inject.html'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="comment">//解析语言,没有设置默认为zh-CN,重构时可以用url_auth来代替</span></span><br><span class="line">    <span class="keyword">var</span> query = querystring.parse(url.parse(req.url).query);</span><br><span class="line">    <span class="keyword">if</span>(query)&#123;</span><br><span class="line">         hl = query.hl?query.hl:<span class="string">'zh-CN'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//<span class="doctag">todo:</span>加入权限认证，调用url_auth中的urlAuth函数进行判断，如果auth为true放行，否则拦截 </span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// var finalUrl = req.url,</span></span><br><span class="line">    <span class="keyword">var</span> finalUrl = <span class="string">'https://scholar.google.com'</span>,</span><br><span class="line">        finalAgent = <span class="literal">null</span>,</span><br><span class="line">        parsedUrl = url.parse(finalUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parsedUrl.protocol === <span class="string">'https:'</span>) &#123;</span><br><span class="line">        finalAgent = https.globalAgent;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        finalAgent = http.globalAgent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    proxy.web(req, res, &#123;</span><br><span class="line">        target: finalUrl,</span><br><span class="line">        agent: finalAgent,</span><br><span class="line">        headers: &#123; host: parsedUrl.hostname,</span><br><span class="line">        &#125;,</span><br><span class="line">        prependPath:<span class="literal">false</span>,</span><br><span class="line">        xfwd:<span class="literal">true</span>,</span><br><span class="line">        hostRewrite:config.proxyHost+<span class="string">':'</span>+config.proxyPort,<span class="comment">//设置重定向地址,</span></span><br><span class="line">        protocolRewrite: <span class="string">'http'</span><span class="comment">//设置重定向协议</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.on(<span class="string">'proxyReq'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">proxyReq,req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果不去掉这个头字段，浏览器报330错误，无法解码</span></span><br><span class="line">    <span class="keyword">if</span>(proxyReq._headers)&#123;</span><br><span class="line">       <span class="keyword">if</span>(proxyReq._headers[<span class="string">'accept-encoding'</span>])&#123;</span><br><span class="line">           proxyReq._headers[<span class="string">'accept-encoding'</span>] = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * [在响应返回到客户端时，重写html并注入js脚本]</span><br><span class="line"> * @param  &#123;[type]&#125; proxyRes    [description]</span><br><span class="line"> * @param  &#123;[type]&#125; request     [description]</span><br><span class="line"> * @param  &#123;[type]&#125; response    [description]</span><br><span class="line"> * @return &#123;[type]&#125;             [description]</span><br><span class="line"> */</span></span><br><span class="line">proxy.on(<span class="string">'proxyRes'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">proxyRes,request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(proxyRes.headers &amp;&amp; proxyRes.headers[ <span class="string">'set-cookie'</span> ])&#123;</span><br><span class="line">       cookieArr =  cookie.parseGoogleCookies(proxyRes.headers[<span class="string">'set-cookie'</span>]); </span><br><span class="line">       proxyRes.headers[<span class="string">'set-cookie'</span>]=cookieArr;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//inject js,rewrite html body</span></span><br><span class="line">    <span class="keyword">if</span>( proxyRes.headers &amp;&amp;</span><br><span class="line">        proxyRes.headers[ <span class="string">'content-type'</span> ] &amp;&amp;</span><br><span class="line">        proxyRes.headers[ <span class="string">'content-type'</span> ].match( <span class="string">'text/html'</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _end = response.end,</span><br><span class="line">            chunks,</span><br><span class="line">            _writeHead = response.writeHead,</span><br><span class="line">            _write = response.write;</span><br><span class="line"></span><br><span class="line">        response.writeHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( proxyRes.headers &amp;&amp; proxyRes.headers[ <span class="string">'content-length'</span> ] )&#123;</span><br><span class="line">                response.setHeader(</span><br><span class="line">                    <span class="string">'content-length'</span>,</span><br><span class="line">                    <span class="built_in">parseInt</span>( proxyRes.headers[ <span class="string">'content-length'</span> ], <span class="number">10</span> ) + injected.length</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不设置可能出现少量乱码</span></span><br><span class="line">            response.setHeader( <span class="string">'transfer-encoding'</span>, proxyRes.headers[<span class="string">'transfer-encoding'</span>] );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Disable cache for all http as well</span></span><br><span class="line">            response.setHeader( <span class="string">'cache-control'</span>, <span class="string">'no-cache'</span> );</span><br><span class="line"></span><br><span class="line">            _writeHead.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        response.write = <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( chunks ) &#123;</span><br><span class="line">                chunks += data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chunks = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        response.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( chunks &amp;&amp; chunks.toString ) &#123;</span><br><span class="line">                _end.apply( <span class="keyword">this</span>, [ modifyHtml( chunks.toString(),hl , injected) ] );</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                _end.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">           &#125;    </span><br><span class="line">            </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port '</span> + PROXY_PORT);</span><br><span class="line">server.listen(PROXY_PORT);</span><br></pre></td></tr></table></figure></p>
<p>代理的功能跟谷歌代理的动能类似，这里不再赘述。谷歌代理见博文<a href="http://blog.noobsky.com/2015/11/24/用node-http-proxy搭建谷歌代理/">用node-http-proxy搭建谷歌代理</a>,下面我主要讲修改cookie来启用谷歌学术的设置功能，有设置功能的谷歌学术才够高大上！谷歌学术的设置是通过cookie来做的，需要完整的功能必须解决cookie的问题。我下面的例子是设置显示导入链接。谷歌学术的默认设置是隐藏导入链接的，需要到设置里勾选显示导入[BibTex、EndNote、RefMan、RefWorks]的链接，见下图：</p>
<ul>
<li>点击右上角我的著作引用情况右边的三角图标，选择设置<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-12.36.30.png" alt=""></li>
<li>然后选择显示导入BibTeX的链接<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-12.36.30.png" alt=""></li>
<li>点击保存后自动跳转到搜索结果,将会显示导入BibTeX（谷歌学术的原始显示）<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-13.20.36.png" alt=""><br>修改谷歌学术的cookie技术原理挺简单的，我们在proxyRes返回之前对set-cookie进行解析并修改相关字段即可，对应以上代码：<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(proxyRes.headers &amp;&amp; proxyRes.headers[ <span class="symbol">'set</span>-cookie' ])&#123;</span><br><span class="line">       cookieArr =  cookie.parseGoogleCookies(proxyRes.headers[<span class="symbol">'set</span>-cookie']); </span><br><span class="line">       proxyRes.headers[<span class="symbol">'set</span>-cookie']=cookieArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>我们再看看parseGoogleCookies函数做了什么事情，代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">	* 解析google scholar返回的cookie</span><br><span class="line">	**/</span></span><br><span class="line">	parseGoogleCookies: <span class="function"><span class="keyword">function</span> <span class="params">(cookies)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// console.log(cookies);</span></span><br><span class="line">	    <span class="keyword">var</span> cookieArr = [];</span><br><span class="line">	    <span class="keyword">if</span> (cookies &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">	            <span class="keyword">var</span> cookieItem = cookieUtil.parse(cookies[i]);</span><br><span class="line">	            <span class="keyword">if</span> (cookieItem.domain) &#123;</span><br><span class="line">	             <span class="comment">//   delete cookieItem.domain;</span></span><br><span class="line">	                  cookieItem.domain = proxyHost;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">if</span> (cookieItem.path) &#123;</span><br><span class="line">	                cookieItem.path = <span class="string">'/'</span>;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">var</span> tempArr = [];</span><br><span class="line">	            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cookieItem) &#123;</span><br><span class="line">	            	<span class="keyword">if</span> (key === <span class="string">'expires'</span> || key === <span class="string">'path'</span>) &#123;</span><br><span class="line">		                tempArr.push(key+<span class="string">'='</span>+cookieItem[key]);</span><br><span class="line">	            	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		                tempArr.push(key+<span class="string">'='</span>+cookieItem[key]);</span><br><span class="line">	            	&#125;</span><br><span class="line">	            &#125;</span><br><span class="line">	            cookieArr.push(tempArr.join(<span class="string">'; '</span>));</span><br><span class="line">	        &#125;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> cookieArr;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不够熟悉http cookie，请到谷歌先脑补一下相关的知识，这里推荐一篇博客<a href="http://www.webryan.net/2011/08/wiki-of-http-cookie/" target="_blank" rel="external">全面解读HTTP Cookie</a>。这里选取有助于理解上面程序的两点。谷歌cookie的用途：Cookie也被用来记忆用户自定义的一些功能。用户在设置自定义特征的时候，仅仅是保存在用户的浏览器中，在下一次访问的时候服务器会根据用户本地的cookie来表现用户的设置。例如google将搜索设置（使用语言、每页的条数，以及打开搜索结果的方式等等）保存在一个COOKIE里。cookie的Domain and Path<br>的作用：定义Cookie的生效作用域，只有当域名和路径同时满足的时候，浏览器才会将Cookie发送给Server。如果没有设置Domain和Path的话，他们会被默认为当前请求页面对应值。下面简单讲解一下cookie的http实现：</p>
<p>以访问<a href="http://blog.noobsky.com">http://blog.noobsky.com</a>为例</p>
<ul>
<li><p>Step1.客户端发起http请求到Server</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: blog<span class="class">.noobsky</span><span class="class">.com</span></span><br><span class="line">(这里是省去了User-Agent,Accept等字段)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Step2. 服务器返回http response,其中可以包含Cookie设置</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: name1=value1</span><br><span class="line">Set-Cookie: name2=value2; Expires=Wed, <span class="number">06</span> Jun <span class="number">2066</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">18</span> GMT</span><br><span class="line">(content of page)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Step3. 后续访问blog.noobsky.com的相关页面</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">GET <span class="string">/archives</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">blog.noobsky.com</span></span><br><span class="line"><span class="attribute">Cookie</span>: <span class="string">name1=value1; name2=value2</span></span><br><span class="line"><span class="attribute">Accept</span>: <span class="string">*/*</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>第一次访问服务器的适合，服务器返回的头字段里通过set-cookie设置cookie，后面再次访问服务器时，客户端会自动的带上相关的cookie字段。这里需要注意的是要想客户端自动带上相关的cookie字段，cookie的domain和path字段必须要跟你访问的server服务。比如你在第一次访问blog.noobsky.com的时候通过技术手段把服务器response中的set-cookie中的domain域（默认值为blog.noobsky.com）修改为coolshell.cn的话，你下次再访问blog.noobsky.com的相关页面时，将不会带上相关的cookie，因为cookie的domain不匹配。同理通过访问代理然后代理访问scholar.google.com时，scholar.google.com服务器返回的response的set-cookie中的domain域的值是scholar.google.com，下次再访问代理时，因为domain域不匹配，将不会自动带上相关的cookie，所以我们在proxyRes返回给客户端之前，需要hack掉相关的cookie域，我们只需把cookie的domain域修改为proxyHost（代理主机），path域设置为<code>&#39;/&#39;</code>：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cookieItem.domain) &#123;</span><br><span class="line">	cookieItem.domain = proxyHost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cookieItem.path) &#123;</span><br><span class="line">	cookieItem.path = <span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下次再访问代理主机时，因为domain域匹配，就会自动带上相关的cookie，谷歌学术就能实现记忆用户自定义的功能啦，你就可以随心所欲使用谷歌学术的设置功能！</p>
<p>除了能使用设置功能我们还需要把谷歌学术的默认显示导入BibTeX更改为导入我的网站，并修改默认的点击事件。默认的点击事件是跳转另一页面显示相应地BibTeX，我需要的点击事件是获取BibTeX数据，并推送给我的学术应用，cool！方法很简单：利用cheerio库修改response的html中<code>导入BibTeX</code>，然后注入相关的js脚本，js脚本修改默认点击事件！</p>
<ul>
<li><p>通过重写response.end函数hack返回的html页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( chunks &amp;&amp; chunks.toString ) &#123;</span><br><span class="line">       	_end.apply( <span class="keyword">this</span>, [ modifyHtml( chunks.toString(),hl , injected) ] );</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        _end.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">    &#125;    </span><br><span class="line">            </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改html的函数如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="built_in">str</span>,lang,inject)&#123;</span><br><span class="line">	$ = cheerio.load(<span class="built_in">str</span>);</span><br><span class="line">	var <span class="built_in">str</span> = config.zhStr;</span><br><span class="line">	<span class="keyword">if</span>(lang.toLowerCase()==<span class="string">'en'</span>)&#123;</span><br><span class="line">	    <span class="built_in">str</span> = config.enStr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//修改显示文本</span></span><br><span class="line">	$(<span class="string">".gs_nta.gs_nph"</span>).each(function(i,elem)&#123;</span><br><span class="line">	    $(<span class="keyword">this</span>).<span class="built_in">text</span>(<span class="built_in">str</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">str</span> = $.html();</span><br><span class="line">	    <span class="comment">// Add or script to the page，注入脚本</span></span><br><span class="line">	<span class="keyword">if</span>( <span class="built_in">str</span>.indexOf( <span class="string">'&lt;/body&gt;'</span> ) &gt; -<span class="number">1</span> ) &#123;</span><br><span class="line">	    <span class="built_in">str</span> = <span class="built_in">str</span>.replace( <span class="string">'&lt;/body&gt;'</span>, inject + <span class="string">'&lt;/body&gt;'</span> );</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">str</span>.indexOf( <span class="string">'&lt;/html&gt;'</span> ) &gt; -<span class="number">1</span> )&#123;</span><br><span class="line">	    <span class="built_in">str</span> = <span class="built_in">str</span>.replace( <span class="string">'&lt;/html&gt;'</span>, inject + <span class="string">'&lt;/html&gt;'</span> );</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="built_in">str</span> = <span class="built_in">str</span> + inject;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注入的js脚本</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".gs_nta.gs_nph"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).bind(<span class="string">"click"</span>, getData);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pdfUrl;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="keyword">this</span>).parent().parent().prev(<span class="string">".gs_ggs.gs_fl"</span>)) &#123;</span><br><span class="line">                pdfUrl = $(<span class="keyword">this</span>).parent().parent().prev(<span class="string">".gs_ggs.gs_fl"</span>).children(<span class="string">"div.gs_md_wp.gs_ttss"</span>).children(<span class="string">"a"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> path = $(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">"get"</span>,</span><br><span class="line">                url: path,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                    alert(<span class="string">"获取BibTex成功!"</span> + data + <span class="string">"pdfUrl:"</span> + pdfUrl);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">"获取BibTex失败!"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这里需要注意的是，推送BibTeX到自己的学术应用中存在跨域问题，这里采用JSONP的方式。激动人心的时刻来了，我们来看一下最终的效果</p>
<ul>
<li>hack原始html后的显示<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-12.37.34.png" alt=""></li>
<li>修改后的点击事件<br><img src="http://7xonwi.com1.z0.glb.clouddn.com/google-scholar-2015-11-26-12.38.07.png" alt=""><br>详细代码见Github上的<a href="https://github.com/yejijie/google-scholar-proxy" target="_blank" rel="external">google-scholar-proxy</a>。</li>
</ul>
<p>本文链接：<a href="http://blog.noobsky.com/2015/11/25/学术应用使用node-http-proxy集成谷歌学术/">http://blog.noobsky.com/2015/11/25/学术应用使用node-http-proxy集成谷歌学术/</a></p>
<p>–EOF–</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搞科研的同学肯定离不开谷歌学术，谷歌学术搜索是文献搜索下载一大利器。之前实验室开发了一款学术应用，遗留了历史问题，就是没有解决文献搜索的功能，而这个任务最后落在我的身上。我采用的方案就是集成谷歌学术，但是国内的网络环境，你懂的，自然状态下根本就访问不了谷歌学术的，你得翻墙才]]>
    </summary>
    
      <category term="Nodejs" scheme="http://blog.noobsky.com/tags/Nodejs/"/>
    
      <category term="node-http-proxy" scheme="http://blog.noobsky.com/tags/node-http-proxy/"/>
    
      <category term="代理" scheme="http://blog.noobsky.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="谷歌学术" scheme="http://blog.noobsky.com/tags/%E8%B0%B7%E6%AD%8C%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="Nodejs" scheme="http://blog.noobsky.com/categories/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用node-http-proxy搭建谷歌代理]]></title>
    <link href="http://blog.noobsky.com/2015/11/24/%E7%94%A8node-http-proxy%E6%90%AD%E5%BB%BA%E8%B0%B7%E6%AD%8C%E4%BB%A3%E7%90%86/"/>
    <id>http://blog.noobsky.com/2015/11/24/用node-http-proxy搭建谷歌代理/</id>
    <published>2015-11-24T06:48:24.000Z</published>
    <updated>2015-11-24T15:46:31.000Z</updated>
    <content type="html"><![CDATA[<p>程序员三大必备网站是：Google、Github、StackOverflow。如果你还在用Baidu搜索技术文章的话，我想说的是，少年你已经被鄙视很多年了，赶紧换成谷歌吧，不要再被鄙视了！Github、StackOverflow在国内能够正常访问，但是Google由于众所周知的原因，国内无法访问，所以我们需要翻墙访问Google。个人觉得shadowsocks的是目前最好用的代理，没有之一！shadowsocks有多牛？前段时间shadowsocks的作者被约谈了，还被要求删除在Github上的源码，你说有多牛！可以自己在vps上利用shadowsocks搭建自己的专属代理，如果你懒的话，也可以直接去买个shadowsocks账号，网上卖家多的是。后面我会写相关的文章介绍如何在vps上搭建服务器，敬请关注。今天先介绍一下用node-http-proxy搭建谷歌代理，小试牛刀一下。</p>
<p>node-http-proxy是一个用于Node.js的HTTP可编程代理库,支持 websockets。它是适用于实现例如代理服务器和负载均衡这样的组件。node-http-proxy使用起来很简单，下面简单介绍一下。</p>
<h1 id="核心概念">核心概念</h1><p>通过createProxyServer函数创建代理，同时你也可选的传入options对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = httpProxy.createProxyServer(options);</span><br></pre></td></tr></table></figure></p>
<p>createProxyServer函数返回的proxy对象包含四个方法</p>
<ul>
<li>web <code>req, res, [options]</code> 用来代理http(s)请求</li>
<li>ws <code>req, socket, head, [options]</code> 用来代理WS(S)请求</li>
<li>listen <code>port</code> 该函数把对象包装成webserver，方便使用</li>
<li>close <code>[callback]</code> 该函数关闭内部的webserver并且停止监听给定的端口</li>
</ul>
<p>然后可以如下调用函数代理请求<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">http</span><span class="class">.createServer</span>(<span class="function">function</span>(req, res) &#123;</span><br><span class="line">  <span class="tag">proxy</span><span class="class">.web</span>(req, res, &#123; <span class="attribute">target</span>: <span class="string">'http://mytarget.com:8080'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>错误处理可以通过监听error事件<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy.<span class="keyword">on</span>(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> <span class="comment">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>或者使用回调API<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy.web(req, res, &#123; target: <span class="string">'http://mytarget.com:8080'</span> &#125;, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="Use_Cases">Use Cases</h1><p>下面的例子显示如何用你自己的http服务器代理请求，你也可以加入自己的业务逻辑处理请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Create a proxy server with custom application logic</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> proxy = httpProxy.createProxyServer(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Create your custom server and just call `proxy.web()` to proxy</span></span><br><span class="line"><span class="comment">// a web request to the target passed in the options</span></span><br><span class="line"><span class="comment">// also you can use `proxy.ws()` to proxy a websockets request</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// You can define here your custom logic to handle the request</span></span><br><span class="line">  <span class="comment">// and then proxy the request.</span></span><br><span class="line">  proxy.web(req, res, &#123; target: <span class="string">'http://127.0.0.1:5060'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"listening on port 5050"</span>)</span><br><span class="line">server.listen(<span class="number">5050</span>);</span><br></pre></td></tr></table></figure></p>
<p>更多例子请查看官方文档</p>
<h1 id="Options">Options</h1><p><code>httpProxy.createProxyServer</code>支持下列options:</p>
<ul>
<li>target: url字符串</li>
<li>forward: url字符串</li>
<li>agent: 传给http(s).request的对象</li>
<li>ssl: 密钥，HTTPS使用</li>
<li>ws: true/false, 是否代理websockets</li>
<li>xfwd: true/false, 是否加上x-forward头字段</li>
<li>secure: true/false, 是否校验ssl证书</li>
<li>toProxy: 传递绝对URL作为<code>path</code></li>
<li>prependPath: true/false, 默认值为true，是否在proxy path前面加上target的path</li>
<li>ignorePath: true/false, 默认值为false，是否忽略传入的请求的proxy path</li>
<li>localAddress: 本地地址</li>
<li>changeOrigin: true/false, 默认值为false, 是否更改原始的host头字段为target URL</li>
<li>auth: 基本身份认证，比如：‘用户名：密码’来计算Authorization header</li>
<li>hostRewrite: 重写重定向（301/302/307/308）的location hostname</li>
<li>autoRewrite: 是否自动重写重定向（301/302/307/308）的location host/port，默认值为false</li>
<li>protocolRewrite: 重写重定向（301/302/307/308）的location的协议，http或者https，默认值为null</li>
</ul>
<h1 id="谷歌代理">谷歌代理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PROXY_PORT = <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">var</span> proxy, server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a proxy server with custom application logic</span></span><br><span class="line">proxy = httpProxy.createProxy(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ERROR'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var finalUrl = req.url,</span></span><br><span class="line">    <span class="keyword">var</span> finalUrl = <span class="string">'https://www.google.com'</span>;</span><br><span class="line">    <span class="keyword">var</span> finalAgent = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> parsedUrl = url.parse(finalUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parsedUrl.protocol === <span class="string">'https:'</span>) &#123;</span><br><span class="line">        finalAgent = https.globalAgent;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        finalAgent = http.globalAgent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    proxy.web(req, res, &#123;</span><br><span class="line">        target: finalUrl,</span><br><span class="line">        agent: finalAgent,</span><br><span class="line">        headers: &#123; host: parsedUrl.hostname &#125;,</span><br><span class="line">        prependPath: <span class="literal">false</span>,</span><br><span class="line">        xfwd : <span class="literal">true</span>,</span><br><span class="line">        hostRewrite: finalUrl.host,</span><br><span class="line">        protocolRewrite: parsedUrl.protocol</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port '</span> + PROXY_PORT);</span><br><span class="line">server.listen(PROXY_PORT);</span><br></pre></td></tr></table></figure>
<p>你没看错，就是这么点代码就能代理谷歌了，前提是你要有个墙外的vps哈！首先设置浏览器的http代理为你的vps，然后再vps上运行上面的代理程序，最后在浏览器中访问www.google.com，然后就是见证奇迹的时候了。有些小伙伴可能迫不及待的拿去试了试，结果发现博主骗人，根本不能代理谷歌。别急，这是因为node-http-proxy有一个小小的bug，不能怪博主，博主也是受害者之一。博主开始也卡在这里很久，最后去阅读源代码才发现问题所在！在node-http-proxy的web-outgoing.js里有个setRedirectHostRewrite函数，该函数的功能就是重定向时重写header中location的host地址，函数代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function setRedirectHostRewrite(req, res, proxyRes, <span class="keyword">options</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">options</span>.hostRewrite || <span class="keyword">options</span>.autoRewrite || <span class="keyword">options</span>.protocolRewrite)</span><br><span class="line">        &amp;&amp; proxyRes.headers[<span class="string">'location'</span>]</span><br><span class="line">        &amp;&amp; redirectRegex.test(proxyRes.statusCode)) &#123;</span><br><span class="line">      var target = url.parse(<span class="keyword">options</span>.target);</span><br><span class="line">      var u = url.parse(proxyRes.headers[<span class="string">'location'</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// make sure the redirected host matches the target host before rewriting</span></span><br><span class="line">      <span class="keyword">if</span> (target.host != u.host) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">options</span>.hostRewrite) &#123;</span><br><span class="line">        u.host = <span class="keyword">options</span>.hostRewrite;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">options</span>.autoRewrite) &#123;</span><br><span class="line">        u.host = req.headers[<span class="string">'host'</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">options</span>.protocolRewrite) &#123;</span><br><span class="line">        u.protocol = <span class="keyword">options</span>.protocolRewrite;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      proxyRes.headers[<span class="string">'location'</span>] = u.format();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>问题出在以下代码：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the redirected host matches the target host before rewriting</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">target</span>.host != u.host) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p>
<p>作者的意图是确保重定向的host跟target的host的匹配，不匹配就直接返回。代理谷歌时就会发生不匹配的情况直接返回了。<br>比如，博主来自中国，当我<code>curl www.google.com</code>时会重定向到www.google.com.hk:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZu1fmzgm3iZ ~]# curl www.google.com</span><br><span class="line"><span class="tag">&lt;<span class="title">HTML</span>&gt;</span><span class="tag">&lt;<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TITLE</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">TITLE</span>&gt;</span><span class="tag">&lt;/<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">H1</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">H1</span>&gt;</span></span><br><span class="line">The document has moved</span><br><span class="line"><span class="tag">&lt;<span class="title">A</span> <span class="attribute">HREF</span>=<span class="value">"http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/%3Fgws_rd%3Dcr&amp;amp;ust=1448378903186576&amp;amp;usg=AFQjCNHtMfRNndvgHHMAzipRzC9NpycwGw"</span>&gt;</span>here<span class="tag">&lt;/<span class="title">A</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="title">BODY</span>&gt;</span><span class="tag">&lt;/<span class="title">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你来自日本，当你<code>curl www.google.com</code>时会重定向到www.google.co.jp：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@ip-172-31-27-165 ~]$ curl www.google.com</span><br><span class="line"><span class="tag">&lt;<span class="title">HTML</span>&gt;</span><span class="tag">&lt;<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TITLE</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">TITLE</span>&gt;</span><span class="tag">&lt;/<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">H1</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">H1</span>&gt;</span></span><br><span class="line">The document has moved</span><br><span class="line"><span class="tag">&lt;<span class="title">A</span> <span class="attribute">HREF</span>=<span class="value">"http://www.google.co.jp/?gfe_rd=cr&amp;amp;ei=toJUVubpIcem8wfGirqQDw"</span>&gt;</span>here<span class="tag">&lt;/<span class="title">A</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="title">BODY</span>&gt;</span><span class="tag">&lt;/<span class="title">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为重定向的host跟target的host不匹配，程序直接返回，hostRewrite无效，所以我们应该去掉以下代码：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the redirected host matches the target host before rewriting</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">target</span>.host != u.host) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们注释掉以上代码，重新运行程序，发现已经可以上谷歌了，是不是很神奇！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>程序员三大必备网站是：Google、Github、StackOverflow。如果你还在用Baidu搜索技术文章的话，我想说的是，少年你已经被鄙视很多年了，赶紧换成谷歌吧，不要再被鄙视了！Github、StackOverflow在国内能够正常访问，但是Google由于众所周]]>
    </summary>
    
      <category term="Nodejs" scheme="http://blog.noobsky.com/tags/Nodejs/"/>
    
      <category term="node-http-proxy" scheme="http://blog.noobsky.com/tags/node-http-proxy/"/>
    
      <category term="代理" scheme="http://blog.noobsky.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="Nodejs" scheme="http://blog.noobsky.com/categories/Nodejs/"/>
    
  </entry>
  
</feed>
